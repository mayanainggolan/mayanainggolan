{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mayanainggolan/mayanainggolan/blob/main/Intro%20to%20Survival%20Probability\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mhTCz786JlRV"
      },
      "outputs": [],
      "source": [
        "# import libary\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from lifelines import KaplanMeierFitter"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# upload data\n",
        "df = pd.read_csv(\"22112023_ansur.csv\", delimiter=\";\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "id": "u-cBgPLFhZ7p",
        "outputId": "ad918826-ce44-4318-da07-05c1912990f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Umur Kelamin Stadium Treatment  Survival_time  Status\n",
              "0    23  Female   Parah   Standar             34   False\n",
              "1    24  Female   Parah   Standar              4    True\n",
              "2    61    Male   Parah   Standar             10    True\n",
              "3    18  Female   Parah   Standar              5    True\n",
              "4    29    Male   Parah   Standar             20    True"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-80a0af40-e38e-416d-93ef-4bc9ffab54d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Umur</th>\n",
              "      <th>Kelamin</th>\n",
              "      <th>Stadium</th>\n",
              "      <th>Treatment</th>\n",
              "      <th>Survival_time</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>23</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>34</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>61</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>10</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>18</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>5</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>29</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>20</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80a0af40-e38e-416d-93ef-4bc9ffab54d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-80a0af40-e38e-416d-93ef-4bc9ffab54d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-80a0af40-e38e-416d-93ef-4bc9ffab54d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a19fe40-69db-45b8-882b-927e9ff850f8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a19fe40-69db-45b8-882b-927e9ff850f8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a19fe40-69db-45b8-882b-927e9ff850f8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "waktu_tertentu = 18  # Ganti dengan waktu tertentu yang ingin kamu analisis\n",
        "probabilitas_hidup = kmf.predict(waktu_tertentu)\n",
        "\n",
        "print(f\"Survival Probability pada waktu {waktu_tertentu} bulan: {probabilitas_hidup:.2%}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uka4XR_bhlDB",
        "outputId": "41c0cf12-fbac-46a5-d753-84a5e7123335"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Survival Probability pada waktu 18 bulan: 72.35%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Membuat kurva Kaplan-Meier\n",
        "kmf = KaplanMeierFitter()\n",
        "kmf.fit(durations=df[\"Survival_time\"], event_observed=df[\"Status\"])\n",
        "\n",
        "# Menampilkan kurva Kaplan-Meier\n",
        "plt.figure(figsize=(10, 6))\n",
        "kmf.plot_survival_function()\n",
        "plt.title(\"Kurva Kaplan-Meier\")\n",
        "plt.xlabel(\"Waktu (Bulan)\")\n",
        "plt.ylabel(\"Survival Probability\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "PYtYrkPKkHQj",
        "outputId": "6110536b-7d85-4f21-90bd-dfc74971840b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q9Two3rfmBJG",
        "outputId": "ebbed5e2-d08f-40a3-82b6-2da8aa867e7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5 entries, 0 to 4\n",
            "Data columns (total 6 columns):\n",
            " #   Column         Non-Null Count  Dtype \n",
            "---  ------         --------------  ----- \n",
            " 0   Umur           5 non-null      int64 \n",
            " 1   Kelamin        5 non-null      object\n",
            " 2   Stadium        5 non-null      object\n",
            " 3   Treatment      5 non-null      object\n",
            " 4   Survival_time  5 non-null      int64 \n",
            " 5   Status         5 non-null      bool  \n",
            "dtypes: bool(1), int64(2), object(3)\n",
            "memory usage: 333.0+ bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menyusun kelompok\n",
        "group1 = df[df['Treatment'] == 'Standar']\n",
        "group2 = df[df['Treatment'] == 'Baru']\n",
        "\n",
        "# Pengecekan nilai numerik dalam kelompok\n",
        "print(\"Group 1 - Survival_time:\")\n",
        "print(group1[\"Survival_time\"].unique())\n",
        "\n",
        "print(\"\\nGroup 2 - Survival_time:\")\n",
        "print(group2[\"Survival_time\"].unique())\n",
        "\n",
        "# Membuat kurva Kaplan-Meier untuk setiap kelompok\n",
        "kmf1 = KaplanMeierFitter()\n",
        "kmf2 = KaplanMeierFitter()\n",
        "\n",
        "try:\n",
        "    kmf1.fit(durations=group1[\"Survival_time\"], event_observed=group1[\"Status\"], label=\"Standar\")\n",
        "    kmf2.fit(durations=group2[\"Survival_time\"], event_observed=group2[\"Status\"], label=\"Baru\")\n",
        "\n",
        "    # Menampilkan kurva Kaplan-Meier\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    kmf1.plot_survival_function()\n",
        "    kmf2.plot_survival_function()\n",
        "\n",
        "    plt.title(\"Kurva Kaplan-Meier untuk Setiap Kelompok\")\n",
        "    plt.xlabel(\"Waktu (Bulan)\")\n",
        "    plt.ylabel(\"Survival Probability\")\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    # Melakukan uji log-rank\n",
        "    result = logrank_test(durations_A=group1[\"Survival_time\"], event_observed_A=group1[\"Status\"],\n",
        "                          durations_B=group2[\"Survival_time\"], event_observed_B=group2[\"Status\"])\n",
        "\n",
        "    # Menampilkan hasil uji log-rank\n",
        "    result.print_summary()\n",
        "\n",
        "    # Interpretasi hasil uji log-rank\n",
        "    if result.p_value < 0.05:\n",
        "        print(\"\\nTerdapat perbedaan signifikan dalam kurva survival antara dua kelompok.\")\n",
        "    else:\n",
        "        print(\"\\nTidak terdapat perbedaan signifikan dalam kurva survival antara dua kelompok.\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Terjadi kesalahan: {str(e)}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 875
        },
        "id": "Du1WC8pEkido",
        "outputId": "3396968a-026e-407c-fd05-e74b74881fc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Group 1 - Survival_time:\n",
            "[34  4 10  5 20 24  8 17]\n",
            "\n",
            "Group 2 - Survival_time:\n",
            "[ 8 27 21 18 16  7 11 25 23 12 13 24 15]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<lifelines.StatisticalResult: logrank_test>\n",
              "               t_0 = -1\n",
              " null_distribution = chi squared\n",
              "degrees_of_freedom = 1\n",
              "         test_name = logrank_test\n",
              "\n",
              "---\n",
              " test_statistic    p  -log2(p)\n",
              "           0.69 0.40      1.30"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>t_0</th>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>null_distribution</th>\n",
              "      <td>chi squared</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>degrees_of_freedom</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test_name</th>\n",
              "      <td>logrank_test</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>test_statistic</th>\n",
              "      <th>p</th>\n",
              "      <th>-log2(p)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.69</td>\n",
              "      <td>0.40</td>\n",
              "      <td>1.30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/latex": "\\begin{tabular}{lrrr}\n & test_statistic & p & -log2(p) \\\\\n0 & 0.69 & 0.40 & 1.30 \\\\\n\\end{tabular}\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Tidak terdapat perbedaan signifikan dalam kurva survival antara dua kelompok.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengonversi variabel kategorikal menggunakan One-Hot Encoding\n",
        "df_encoded = pd.get_dummies(df, columns=[\"Kelamin\", \"Stadium\", \"Treatment\"], drop_first=True)\n",
        "\n",
        "# Membuat model Cox Proportional-Hazards\n",
        "cph = CoxPHFitter()\n",
        "cph.fit(df_encoded, duration_col=\"Survival_time\", event_col=\"Status\")\n",
        "\n",
        "# Menampilkan hasil analisis\n",
        "cph.print_summary()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 569
        },
        "id": "VrEpYa3KkNDA",
        "outputId": "70441022-3bc3-4841-a0ae-0c274039761e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<lifelines.CoxPHFitter: fitted with 30 total observations, 20 right-censored observations>\n",
              "             duration col = 'Survival_time'\n",
              "                event col = 'Status'\n",
              "      baseline estimation = breslow\n",
              "   number of observations = 30\n",
              "number of events observed = 10\n",
              "   partial log-likelihood = -27.91\n",
              "         time fit was run = 2023-11-22 06:11:18 UTC\n",
              "\n",
              "---\n",
              "                       coef  exp(coef)   se(coef)   coef lower 95%   coef upper 95%  exp(coef) lower 95%  exp(coef) upper 95%\n",
              "covariate                                                                                                                    \n",
              "Umur                  -0.01       0.99       0.03            -0.07             0.04                 0.94                 1.05\n",
              "Kelamin_Male           1.15       3.17       0.77            -0.36             2.66                 0.70                14.34\n",
              "Stadium_Sangat Parah   1.07       2.91       0.96            -0.82             2.95                 0.44                19.17\n",
              "Treatment_Standar      1.02       2.77       0.76            -0.46             2.50                 0.63                12.22\n",
              "\n",
              "                       cmp to     z    p   -log2(p)\n",
              "covariate                                          \n",
              "Umur                     0.00 -0.38 0.70       0.51\n",
              "Kelamin_Male             0.00  1.50 0.13       2.89\n",
              "Stadium_Sangat Parah     0.00  1.11 0.27       1.90\n",
              "Treatment_Standar        0.00  1.35 0.18       2.49\n",
              "---\n",
              "Concordance = 0.65\n",
              "Partial AIC = 63.83\n",
              "log-likelihood ratio test = 3.92 on 4 df\n",
              "-log2(p) of ll-ratio test = 1.26"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>model</th>\n",
              "      <td>lifelines.CoxPHFitter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration col</th>\n",
              "      <td>'Survival_time'</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>event col</th>\n",
              "      <td>'Status'</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>baseline estimation</th>\n",
              "      <td>breslow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number of observations</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number of events observed</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>partial log-likelihood</th>\n",
              "      <td>-27.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time fit was run</th>\n",
              "      <td>2023-11-22 06:11:18 UTC</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th style=\"min-width: 12px;\"></th>\n",
              "      <th style=\"min-width: 12px;\">coef</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef)</th>\n",
              "      <th style=\"min-width: 12px;\">se(coef)</th>\n",
              "      <th style=\"min-width: 12px;\">coef lower 95%</th>\n",
              "      <th style=\"min-width: 12px;\">coef upper 95%</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef) lower 95%</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef) upper 95%</th>\n",
              "      <th style=\"min-width: 12px;\">cmp to</th>\n",
              "      <th style=\"min-width: 12px;\">z</th>\n",
              "      <th style=\"min-width: 12px;\">p</th>\n",
              "      <th style=\"min-width: 12px;\">-log2(p)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Umur</th>\n",
              "      <td>-0.01</td>\n",
              "      <td>0.99</td>\n",
              "      <td>0.03</td>\n",
              "      <td>-0.07</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.94</td>\n",
              "      <td>1.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-0.38</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Kelamin_Male</th>\n",
              "      <td>1.15</td>\n",
              "      <td>3.17</td>\n",
              "      <td>0.77</td>\n",
              "      <td>-0.36</td>\n",
              "      <td>2.66</td>\n",
              "      <td>0.70</td>\n",
              "      <td>14.34</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.50</td>\n",
              "      <td>0.13</td>\n",
              "      <td>2.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stadium_Sangat Parah</th>\n",
              "      <td>1.07</td>\n",
              "      <td>2.91</td>\n",
              "      <td>0.96</td>\n",
              "      <td>-0.82</td>\n",
              "      <td>2.95</td>\n",
              "      <td>0.44</td>\n",
              "      <td>19.17</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.11</td>\n",
              "      <td>0.27</td>\n",
              "      <td>1.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Treatment_Standar</th>\n",
              "      <td>1.02</td>\n",
              "      <td>2.77</td>\n",
              "      <td>0.76</td>\n",
              "      <td>-0.46</td>\n",
              "      <td>2.50</td>\n",
              "      <td>0.63</td>\n",
              "      <td>12.22</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.35</td>\n",
              "      <td>0.18</td>\n",
              "      <td>2.49</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Concordance</th>\n",
              "      <td>0.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Partial AIC</th>\n",
              "      <td>63.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>log-likelihood ratio test</th>\n",
              "      <td>3.92 on 4 df</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-log2(p) of ll-ratio test</th>\n",
              "      <td>1.26</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/latex": "\\begin{tabular}{lrrrrrrrrrrr}\n & coef & exp(coef) & se(coef) & coef lower 95% & coef upper 95% & exp(coef) lower 95% & exp(coef) upper 95% & cmp to & z & p & -log2(p) \\\\\ncovariate &  &  &  &  &  &  &  &  &  &  &  \\\\\nUmur & -0.01 & 0.99 & 0.03 & -0.07 & 0.04 & 0.94 & 1.05 & 0.00 & -0.38 & 0.70 & 0.51 \\\\\nKelamin_Male & 1.15 & 3.17 & 0.77 & -0.36 & 2.66 & 0.70 & 14.34 & 0.00 & 1.50 & 0.13 & 2.89 \\\\\nStadium_Sangat Parah & 1.07 & 2.91 & 0.96 & -0.82 & 2.95 & 0.44 & 19.17 & 0.00 & 1.11 & 0.27 & 1.90 \\\\\nTreatment_Standar & 1.02 & 2.77 & 0.76 & -0.46 & 2.50 & 0.63 & 12.22 & 0.00 & 1.35 & 0.18 & 2.49 \\\\\n\\end{tabular}\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menampilkan ringkasan hasil analisis model\n",
        "cph.print_summary()\n",
        "\n",
        "\n",
        "# Membuat DataFrame untuk menyusun interpretasi\n",
        "interpretation_df = pd.DataFrame({\n",
        "    'Variable': ['Umur', 'Kelamin_Male', 'Stadium_Sangat Parah', 'Treatment_Standar'],\n",
        "    'Koefisien': [-0.01, 1.15, 1.07, 1.02],\n",
        "    'Hazard Ratio': [np.exp(-0.01), np.exp(1.15), np.exp(1.07), np.exp(1.02)],\n",
        "    'P-value': [0.70, 0.00, 0.00, 0.00]\n",
        "})\n",
        "\n",
        "# Menampilkan interpretasi\n",
        "print(interpretation_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "Uf1271Q4q_mn",
        "outputId": "0956b6ee-df67-40fd-ee81-a8c917755c16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<lifelines.CoxPHFitter: fitted with 30 total observations, 20 right-censored observations>\n",
              "             duration col = 'Survival_time'\n",
              "                event col = 'Status'\n",
              "      baseline estimation = breslow\n",
              "   number of observations = 30\n",
              "number of events observed = 10\n",
              "   partial log-likelihood = -27.91\n",
              "         time fit was run = 2023-11-22 06:11:18 UTC\n",
              "\n",
              "---\n",
              "                       coef  exp(coef)   se(coef)   coef lower 95%   coef upper 95%  exp(coef) lower 95%  exp(coef) upper 95%\n",
              "covariate                                                                                                                    \n",
              "Umur                  -0.01       0.99       0.03            -0.07             0.04                 0.94                 1.05\n",
              "Kelamin_Male           1.15       3.17       0.77            -0.36             2.66                 0.70                14.34\n",
              "Stadium_Sangat Parah   1.07       2.91       0.96            -0.82             2.95                 0.44                19.17\n",
              "Treatment_Standar      1.02       2.77       0.76            -0.46             2.50                 0.63                12.22\n",
              "\n",
              "                       cmp to     z    p   -log2(p)\n",
              "covariate                                          \n",
              "Umur                     0.00 -0.38 0.70       0.51\n",
              "Kelamin_Male             0.00  1.50 0.13       2.89\n",
              "Stadium_Sangat Parah     0.00  1.11 0.27       1.90\n",
              "Treatment_Standar        0.00  1.35 0.18       2.49\n",
              "---\n",
              "Concordance = 0.65\n",
              "Partial AIC = 63.83\n",
              "log-likelihood ratio test = 3.92 on 4 df\n",
              "-log2(p) of ll-ratio test = 1.26"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>model</th>\n",
              "      <td>lifelines.CoxPHFitter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration col</th>\n",
              "      <td>'Survival_time'</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>event col</th>\n",
              "      <td>'Status'</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>baseline estimation</th>\n",
              "      <td>breslow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number of observations</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number of events observed</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>partial log-likelihood</th>\n",
              "      <td>-27.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time fit was run</th>\n",
              "      <td>2023-11-22 06:11:18 UTC</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th style=\"min-width: 12px;\"></th>\n",
              "      <th style=\"min-width: 12px;\">coef</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef)</th>\n",
              "      <th style=\"min-width: 12px;\">se(coef)</th>\n",
              "      <th style=\"min-width: 12px;\">coef lower 95%</th>\n",
              "      <th style=\"min-width: 12px;\">coef upper 95%</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef) lower 95%</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef) upper 95%</th>\n",
              "      <th style=\"min-width: 12px;\">cmp to</th>\n",
              "      <th style=\"min-width: 12px;\">z</th>\n",
              "      <th style=\"min-width: 12px;\">p</th>\n",
              "      <th style=\"min-width: 12px;\">-log2(p)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Umur</th>\n",
              "      <td>-0.01</td>\n",
              "      <td>0.99</td>\n",
              "      <td>0.03</td>\n",
              "      <td>-0.07</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.94</td>\n",
              "      <td>1.05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-0.38</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Kelamin_Male</th>\n",
              "      <td>1.15</td>\n",
              "      <td>3.17</td>\n",
              "      <td>0.77</td>\n",
              "      <td>-0.36</td>\n",
              "      <td>2.66</td>\n",
              "      <td>0.70</td>\n",
              "      <td>14.34</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.50</td>\n",
              "      <td>0.13</td>\n",
              "      <td>2.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stadium_Sangat Parah</th>\n",
              "      <td>1.07</td>\n",
              "      <td>2.91</td>\n",
              "      <td>0.96</td>\n",
              "      <td>-0.82</td>\n",
              "      <td>2.95</td>\n",
              "      <td>0.44</td>\n",
              "      <td>19.17</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.11</td>\n",
              "      <td>0.27</td>\n",
              "      <td>1.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Treatment_Standar</th>\n",
              "      <td>1.02</td>\n",
              "      <td>2.77</td>\n",
              "      <td>0.76</td>\n",
              "      <td>-0.46</td>\n",
              "      <td>2.50</td>\n",
              "      <td>0.63</td>\n",
              "      <td>12.22</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.35</td>\n",
              "      <td>0.18</td>\n",
              "      <td>2.49</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Concordance</th>\n",
              "      <td>0.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Partial AIC</th>\n",
              "      <td>63.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>log-likelihood ratio test</th>\n",
              "      <td>3.92 on 4 df</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-log2(p) of ll-ratio test</th>\n",
              "      <td>1.26</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/latex": "\\begin{tabular}{lrrrrrrrrrrr}\n & coef & exp(coef) & se(coef) & coef lower 95% & coef upper 95% & exp(coef) lower 95% & exp(coef) upper 95% & cmp to & z & p & -log2(p) \\\\\ncovariate &  &  &  &  &  &  &  &  &  &  &  \\\\\nUmur & -0.01 & 0.99 & 0.03 & -0.07 & 0.04 & 0.94 & 1.05 & 0.00 & -0.38 & 0.70 & 0.51 \\\\\nKelamin_Male & 1.15 & 3.17 & 0.77 & -0.36 & 2.66 & 0.70 & 14.34 & 0.00 & 1.50 & 0.13 & 2.89 \\\\\nStadium_Sangat Parah & 1.07 & 2.91 & 0.96 & -0.82 & 2.95 & 0.44 & 19.17 & 0.00 & 1.11 & 0.27 & 1.90 \\\\\nTreatment_Standar & 1.02 & 2.77 & 0.76 & -0.46 & 2.50 & 0.63 & 12.22 & 0.00 & 1.35 & 0.18 & 2.49 \\\\\n\\end{tabular}\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Variable  Koefisien  Hazard Ratio  P-value\n",
            "0                  Umur      -0.01      0.990050      0.7\n",
            "1          Kelamin_Male       1.15      3.158193      0.0\n",
            "2  Stadium_Sangat Parah       1.07      2.915379      0.0\n",
            "3     Treatment_Standar       1.02      2.773195      0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install lifelines"
      ],
      "metadata": {
        "id": "Lp_Yxi_qL5t_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "id": "rondOFxrMHlE",
        "outputId": "762e13ad-df13-4a77-ba7a-de9109fce09c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Umur Kelamin Stadium Treatment  Survival_time  Status\n",
              "0   Tua  Female   Parah   Standar             34   False\n",
              "1  Muda  Female   Parah   Standar              4    True\n",
              "2   Tua    Male   Parah   Standar             10    True\n",
              "3   Tua  Female   Parah   Standar              5    True\n",
              "4  Muda    Male   Parah   Standar             20    True"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-78b5186e-f1af-42a5-adf8-6520d13b6a58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Umur</th>\n",
              "      <th>Kelamin</th>\n",
              "      <th>Stadium</th>\n",
              "      <th>Treatment</th>\n",
              "      <th>Survival_time</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>34</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Muda</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>10</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>5</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Muda</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>20</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78b5186e-f1af-42a5-adf8-6520d13b6a58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-78b5186e-f1af-42a5-adf8-6520d13b6a58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-78b5186e-f1af-42a5-adf8-6520d13b6a58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6cef0e66-d665-49ed-bf18-74911da737f0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6cef0e66-d665-49ed-bf18-74911da737f0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6cef0e66-d665-49ed-bf18-74911da737f0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "id": "9DlYSLwXJlRW"
      },
      "outputs": [],
      "source": [
        "import matplotlib as mpl\n",
        "\n",
        "# Plotting syle\n",
        "plt.style.use('dark_background')\n",
        "\n",
        "# Plotting functions\n",
        "def clean_ax(ax, clean_all : bool = False, inverted : bool = False):\n",
        "    \"\"\"\n",
        "    Cleans the borders of a matplotlib.axis object.\n",
        "    Parameters\n",
        "    ----------\n",
        "    ax: matplotlib.axis\n",
        "        axis object to be modified\n",
        "    clean_all: boolean (default = False)\n",
        "        whether to clean the entire boundary\n",
        "    inverted: boolean (default = False)\n",
        "        whether to clean bottom and right borders\n",
        "    \"\"\"\n",
        "    if clean_all:\n",
        "        ax.spines['top'].set_visible(False)\n",
        "        ax.spines['right'].set_visible(False)\n",
        "        ax.spines['left'].set_visible(False)\n",
        "        ax.spines['bottom'].set_visible(False)\n",
        "    elif inverted:\n",
        "        ax.spines['bottom'].set_visible(False)\n",
        "        ax.spines['right'].set_visible(False)\n",
        "    else:\n",
        "        ax.spines['top'].set_visible(False)\n",
        "        ax.spines['right'].set_visible(False)\n",
        "    return ax"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tTySFJ4cJlRX"
      },
      "source": [
        "# Introduction to Survival Analysis\n",
        "\n",
        "In this notebook we will take a quick review of the collection of statistical techniques known as **survival analysis**. In survival analysis, we are generally interested in the time until an event happens. Thus, the response variable is usually called **survival time**, **failure time** or **event time**.\n",
        "\n",
        "Some examples of such situations are:\n",
        "* Survival time of a patient after a surgery or treatment.\n",
        "* Time until a former prisoner goes back to jail.\n",
        "* The time taken for a farm to experience its first case of an exotic disease.\n",
        "* The time until a person gets inquired at Serasa.\n",
        "* ... or the time until a person (Data Scientist) dies.\n",
        "\n",
        "## Censoring\n",
        "When analyzing (accompanying) subjects on a survival experiment (such as the ones listed above) typically some subjects will have **censored** survival times. That is, the survival times of such subjects are actually not observed. This is the case when dealing with death as the event, for instance. In other words, censoring occurs when we are unable to collect a complete set of data for a subject (because he dropped out of the study, for instance).\n",
        "* *Time-to-censoring* $C$, is the duration between the start event and the censoring.\n",
        "* *right-censoring*: censoring that occurs before the event, this is, no information could be collected about the event of interest for that subject.\n",
        "* *left-censoring*: occurs when a person's true *survival* time is less that or equal to the time information was observed, e.g., time until COVID exposure.\n",
        "\n",
        "Often, a dataset with right censoring would look like:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "Bme6rrFbJlRZ",
        "outputId": "4dae1d71-79ae-44ff-e4fa-21430457af81"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   birth  death  status\n",
              "0   3.75    NaN       0\n",
              "1   9.51    NaN       0\n",
              "2   7.32   7.73       1\n",
              "3   5.99    NaN       0\n",
              "4   1.56    NaN       0\n",
              "5   1.56   5.81       1\n",
              "6   0.58   4.22       1\n",
              "7   8.66  12.33       0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-575a9666-5ffe-497a-9a79-8a2ffb0e6d20\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>birth</th>\n",
              "      <th>death</th>\n",
              "      <th>status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9.51</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.32</td>\n",
              "      <td>7.73</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.99</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.56</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1.56</td>\n",
              "      <td>5.81</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.58</td>\n",
              "      <td>4.22</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8.66</td>\n",
              "      <td>12.33</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-575a9666-5ffe-497a-9a79-8a2ffb0e6d20')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-575a9666-5ffe-497a-9a79-8a2ffb0e6d20 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-575a9666-5ffe-497a-9a79-8a2ffb0e6d20');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-376a9d3d-95e3-4a3a-8c86-2ad2be58b4d9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-376a9d3d-95e3-4a3a-8c86-2ad2be58b4d9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-376a9d3d-95e3-4a3a-8c86-2ad2be58b4d9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "random_seed = 42\n",
        "study_duration = 15\n",
        "\n",
        "np.random.seed(seed = random_seed)\n",
        "births = np.reshape(np.round(np.random.rand(8,1)* 10, 2), -1)\n",
        "survival_df = pd.DataFrame({'birth': births,\n",
        "                            'death': np.reshape(np.round([x +np.random.random()*20 for x in births],2), -1) })\n",
        "\n",
        "survival_df.loc[survival_df.death > study_duration, 'death'] = np.nan\n",
        "survival_df['status'] = 1 - survival_df.death.isna().astype(int)\n",
        "# Censoring an arbitrary observation\n",
        "idx = survival_df[~survival_df['death'].isna()].index[-1]\n",
        "survival_df.at[idx, 'status'] = 0\n",
        "\n",
        "survival_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 563
        },
        "id": "OHnySsNhJlRa",
        "outputId": "ae02cca9-f375-46bb-ca29-1475d3ba4e1e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 768x576 with 1 Axes>"
            ],
            "image/png": "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A2AGXv9iJeP1yOg4ZH71PREREWnxRU1hYWEAgKdPn6r0R0REAADKly+f63UG+l5D2G1e30yFQ9PV9C5Qv9CJd8IlIqLs+N0IxqlT/vC7oTtHYoU2Njc3NyGEEJ06dVLp79SpkxBCiBEjRkjPyMaW0WwBkQQI8d+ffd6a3uet6bZakJmNjY2NjU1bmtaOkO7atQsAMH78eJV+JycnvHr1CqdOnZKQikizewAWIvNbO715S6iF4H1IiYiI3qS155DeuHED69atw/jx42FgYIDTp0/DwcEBw4YNg5ubG8LDw2VHJFIxH1k/gekwgCZZTCciItJVCrweKtVKBgYGmD17NsaOHQtLS0vcv38fK1aswG+//Zan9dWxb47EuHiE3WFJQERERNrLzq42zM1NER2dAD+/ENlxCp1WF6QFbYn/RQT6XsOqcZNlRyEiIiLKlLePGxwcmuDUKX907jRbdpxCp7XnkBIRERGRbmBBSkRERERSsSAlIiIiIqlYkBIRERGRVCxIiYiIiEgqFqREREREJBULUiIiIiKSigUpEREREUmlUzfGJyIiIiLtwxFSIiIiIpKKBSkRERERScWClIiIiIik0qmCdIn/RUxav0J2DCIiIqIsefu4IV0chLePm+woRUKnClIiIiIi0j4sSImIiIhIKhakRERERCQVC1IiIiIikooFKRERERFJxYKUiIiIiKRiQUpEREREUrEgJSIiIiKpFACE7BBFpY59cyTGxSPszj3ZUYiIiIgyZWdXG+bmpoiOToCfX4jsOIVOpwpSIiIiItI+PGRPRERERFKxICUiIiIiqXSqIJ20fgX6fzlddgwiIiKiLC1d6gRvHzcsXeokO0qRMJAdoCjVbdVCdgQiIiKibNk1s4GDQxPZMYqMTo2QEhEREZH2YUFKRERERFKxICUiIiIiqViQEhEREZFULEiJiIiISCoWpEREREQkFQtSIiIiIpJKp+5DemylO16EhcuOQURERJSlTRtP4vQpf4SGRsiOUiQUAITsEERERESku3jInoiIiIikYkFKRERERFLp1Dmk3SeNx4uwcPh6HZEdhYiIiChTjo5dYG1dGaGhEdi06aTsOIVOp0ZIe7g4wb5/H9kxiIiIiLLkOKYLXOeNhOOYLrKjFAmdKkiJiIiISPuwICWiPLHN53QiIqIMWluQduzYEUIIja1Nmzay4xHp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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "f, ax = plt.subplots(dpi =120)\n",
        "# Fix plot limits\n",
        "ax.set_xlim([0, 16])\n",
        "ax.set_ylim([-0.5, 7.5])\n",
        "xlim = ax.get_xlim()\n",
        "xlim_rng = xlim[1]-xlim[0]\n",
        "# Study reference initial and final points\n",
        "ax.axvline(x=0, linestyle = '--', c= 'C0')\n",
        "ax.annotate('study begins', xy = (0.2, 1.5), c = 'C0', rotation = 90)\n",
        "ax.axvline(x=15, linestyle = '--', c= 'C1')\n",
        "ax.annotate('study ends', xy = (15.2, 1.5), c = 'C1', rotation = 90)\n",
        "\n",
        "# Survival lines\n",
        "for i, j in survival_df.iterrows():\n",
        "    if j['status'] != 0:\n",
        "        ax.axhline(y = i,\n",
        "                    xmin = j['birth']/xlim[1],\n",
        "                    xmax = j['death']/xlim[1],\n",
        "                    alpha = 0.7)\n",
        "        ax.scatter(x = j['death'], y = i, marker = 'x', c = 'r')\n",
        "    else:\n",
        "        if not np.isnan(j['death']):\n",
        "            ax.axhline(y = i,\n",
        "                        xmin = j['birth']/xlim[1],\n",
        "                        xmax = j['death']/xlim[1],\n",
        "                        alpha = 0.7)\n",
        "            ax.annotate( 'Lost', xy = (j['death']+0.1, i-0.1), c = 'C3')\n",
        "        else:\n",
        "            ax.axhline(y = i,\n",
        "                        xmin = j['birth']/xlim[1],\n",
        "                        alpha = 0.7)\n",
        "clean_ax(ax, clean_all = True)\n",
        "ax.set_ylabel('Subject')\n",
        "ax.set_xlabel('Survival time')\n",
        "ax.set_title('Survival analysis w/ right censoring')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GdNZWqFDJlRc"
      },
      "source": [
        "In the above picture, subjects 2, 5 and 6 had actually suffered an event while subject 7's track was lost. This is, we do not know whether subject 7 has suffered an event or just his/her records disappeared for some reason (e.g. moving away from the the location where the study is being performed).\n",
        "Note that in the case of studying a death event, the censoring considers unregisterd deaths, such as COVID-19 sub notification issues around the world.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "04sSCgGkJlRd"
      },
      "source": [
        "\n",
        "## Describing time to event\n",
        "Let us start with some terminology and definitions.\n",
        "\n",
        "> **Definition: [Survival Time]** Let $T \\in \\mathbb{R}^{+}$ be a random variable (survival time) and $t$ an particular arbitrary value for $T$.\n",
        "\n",
        "> **Definition: [Censor variable]** Let $d \\in \\{0,1\\}$ be the response variable such that $d=1$ if the event has happened while $d=0$ in the case of censoring; This is, the event has not been observed whether because it has not happened or because we have lost track of the subject.\n",
        "\n",
        "\n",
        "### Death density\n",
        "When considering the time until an event happens (e.g. death) we can construct a histogram of the count of events as a function of time. In simple terms, we could fit a curve to this histogram (e.g. using Kernel Density Estimation) and produce a *death* probability density function $f(t)$. After normalization, at any given time $t$ the proportion of observed events in the population is given by:\n",
        "$$F(t) = \\int_{0}^{t}f(u)du,$$\n",
        "the cumulative death distribution function. Essentially, we are assuming $T$ (time-to-event) to be a random variable with cumulative distribution function:\n",
        "$$F(t) := \\mathbb{P}(T \\leq t)$$\n",
        "\n",
        "To illustrate this, consider the following dataset:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jSb3C4FKJlRe",
        "outputId": "08114926-0437-4a93-f976-bbe0218e41d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ls: cannot access 'data/healthcare': No such file or directory\n"
          ]
        }
      ],
      "source": [
        "!ls data/healthcare"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "id": "Ich6b9awJlRe",
        "outputId": "18220431-fa32-4fce-ab90-825911985ba8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Umur Kelamin Stadium Treatment  Survival_time  Status\n",
              "0   Tua  Female   Parah   Standar             34   False\n",
              "1  Muda  Female   Parah   Standar              4    True\n",
              "2   Tua    Male   Parah   Standar             10    True\n",
              "3   Tua  Female   Parah   Standar              5    True\n",
              "4  Muda    Male   Parah   Standar             20    True"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00bb386c-80ed-4162-8225-0b65ff0ac7cf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Umur</th>\n",
              "      <th>Kelamin</th>\n",
              "      <th>Stadium</th>\n",
              "      <th>Treatment</th>\n",
              "      <th>Survival_time</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>34</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Muda</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>10</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>5</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Muda</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>20</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00bb386c-80ed-4162-8225-0b65ff0ac7cf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-00bb386c-80ed-4162-8225-0b65ff0ac7cf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-00bb386c-80ed-4162-8225-0b65ff0ac7cf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-98c9c243-d42e-4f39-a1d7-104f6b039cb0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-98c9c243-d42e-4f39-a1d7-104f6b039cb0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-98c9c243-d42e-4f39-a1d7-104f6b039cb0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "df = pd.read_csv(\"kanker.csv\", delimiter=\";\")\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v0XWEpdPJlRe"
      },
      "source": [
        "The dataset contains information about countries from 1946 to 2008. Thus, this is a right censored dataset. Among the information from countries there are two special columns named `bornyear` and `endyear` which stand for the years that a specific country (with that name) was born and was ended. We can use the countries' duration time as our survival time random variable."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "id": "zu9GOenPPgKg",
        "outputId": "ac449e71-8992-4894-fd68-85c002ef39a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Umur Kelamin Stadium Treatment  Survival_time  Status\n",
              "0   Tua  Female   Parah   Standar             34   False\n",
              "1  Muda  Female   Parah   Standar              4    True\n",
              "2   Tua    Male   Parah   Standar             10    True\n",
              "3   Tua  Female   Parah   Standar              5    True\n",
              "4  Muda    Male   Parah   Standar             20    True"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-25a2cfa0-34f8-4e2a-b0ea-5d0f52ba9d53\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Umur</th>\n",
              "      <th>Kelamin</th>\n",
              "      <th>Stadium</th>\n",
              "      <th>Treatment</th>\n",
              "      <th>Survival_time</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>34</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Muda</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>10</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Tua</td>\n",
              "      <td>Female</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>5</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Muda</td>\n",
              "      <td>Male</td>\n",
              "      <td>Parah</td>\n",
              "      <td>Standar</td>\n",
              "      <td>20</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25a2cfa0-34f8-4e2a-b0ea-5d0f52ba9d53')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-25a2cfa0-34f8-4e2a-b0ea-5d0f52ba9d53 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-25a2cfa0-34f8-4e2a-b0ea-5d0f52ba9d53');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-68cb7e7e-5e55-4dfd-81a6-f03d6ae2769e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68cb7e7e-5e55-4dfd-81a6-f03d6ae2769e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-68cb7e7e-5e55-4dfd-81a6-f03d6ae2769e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 563
        },
        "id": "qJ8-rcWrJlRf",
        "outputId": "716bb6e3-4c14-4028-eafa-6fa53ace14cd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 768x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "f, ax = plt.subplots(dpi = 120)\n",
        "df.Survival_time.plot.kde(ax = ax, color = 'C0', linewidth = 3, label = 'kde')\n",
        "df.Survival_time.plot.hist(density = True, ax = ax, color = 'C7', alpha = 0.7, label = 'histogram', bins = 15)\n",
        "ax.legend(loc = 'best', frameon = False)\n",
        "clean_ax(ax, clean_all = True)\n",
        "ax.set_xlim([-50, 600])\n",
        "ax.set_ylabel('Density')\n",
        "ax.set_xlabel('Survival Time')\n",
        "ax.set_title('Survival Time Histogram')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XofzM2edJlRf"
      },
      "source": [
        "\n",
        "### Survival function\n",
        "\n",
        ">**Definition:** The survival function $S(t)$ gives the probability that a person survives longer than some specified time $t$, in other words:\n",
        ">$$S(t):=\\mathbb{P}(T > t)$$\n",
        "Given a death density function $f(t)$. The area under the curve to the right of time $t$ is the proportion of subjects in the population who have survived past time $t$. We call this quantity $S(t)$ and it is given by:\n",
        "$$S(t) = 1 - \\int_{0}^{t}f(u)du = 1 - F(t).$$\n",
        "The survival function is related an instantaneous risk rate which we introduce next.\n",
        "\n",
        "### Instantaneous Hazard function\n",
        "\n",
        "> **Definition:** The instantaneous rate at which a randomly-selected individual known to be alive at time $t$ will die at time $t+ \\Delta t$ is called the conditional failure rate or instantaneous hazard, $\\lambda(t)$. Given by:\n",
        ">$$\\lambda(t) = \\lim_{\\Delta t \\rightarrow 0}\\dfrac{\\mathbb{P}(t\\leq T < t + \\Delta t | T \\geq t  )}{\\Delta t},$$\n",
        ">where $\\Delta t$ is an infinitesimal time interval.\n",
        "\n",
        "Note that, in contrast to the *survival function* the *instantaneous hazard rate* focus on the event rather than surviving to the event. The above expression can be written as:\n",
        "\\begin{align*}\n",
        "\\lambda(t) &= \\lim_{\\Delta t \\rightarrow 0} \\dfrac{\\mathbb{P}(t\\leq T < t + \\Delta t \\cap T \\geq t)}{\\mathbb{P}(T \\geq t)\\Delta t}, \\\\\n",
        "            &= \\lim_{\\Delta t \\rightarrow 0} \\dfrac{\\mathbb{P}(t\\leq T < t + \\Delta t)}{S(t) \\Delta t}, \\\\\n",
        "            &= \\lim_{\\Delta t \\rightarrow 0} \\dfrac{f(t)\\Delta t}{S(t)\\Delta t}\\\\\n",
        "            &= \\dfrac{f(t)}{S(t)}.\n",
        "\\end{align*}\n",
        "Where in the second line we have used the fact that $\\mathbb{P}(t\\leq T < t + \\Delta t \\cap T \\geq t) = \\mathbb{P}(t\\leq T < t + \\Delta t)$ and then we used the fact that for very small $\\Delta t$ we can write $\\mathbb{P}(t\\leq T < t + \\Delta t) \\approx f(t) \\Delta t$. In the last line: $f(t)$ is the *death density* and $S(t)$ is the survival function.\n",
        "\n",
        "Furthermore, by noting that:\n",
        "$$\\dfrac{d}{dt}S(t) = -f(t),$$\n",
        "we can write for the hazard function:\n",
        "$$\\lambda(t) = -\\dfrac{d}{dt}\\log S(t)\\;\\;\\; \\text{or:  } \\;\\;S(t) = e^{-\\int_{0}^{t}\\lambda(u)du}$$\n",
        "\n",
        "> **Example:** This relation allows us to analyze a very simple scenario, the one where the hazard risk does not change with time $t$. This is: $\\lambda = c$, where $c$ is a constant value. Which leaves for the survival function:\n",
        ">$$S(t) = e^{-c t}$$\n",
        ">The above is straightforward to illustrate with a few code lines:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 512
        },
        "id": "c9H8QNclJlRg",
        "outputId": "8bac7353-ffde-4a83-c161-edeac09de2d6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "c = 0.65\n",
        "x = np.linspace(0, 10, 100)\n",
        "S = np.exp(- c * x)\n",
        "f, ax = plt.subplots(1,2, dpi = 120, figsize = (12,4))\n",
        "ax[0].axhline(y = c, xmin = x[0], xmax = x[-1], label = 'hazard rate')\n",
        "ax[0].set_xlim([x[0], x[-1]])\n",
        "clean_ax(ax[0])\n",
        "ax[0].legend(loc = 'best', frameon = False)\n",
        "ax[0].set_ylabel(r'$\\lambda(t)$')\n",
        "ax[0].set_xlabel('Time')\n",
        "# Survival function\n",
        "ax[1].plot(x, S, label = 'survival function')\n",
        "ax[1].set_xlabel('Time')\n",
        "ax[1].set_ylabel(r'$S(t)$')\n",
        "ax[1].legend(loc = 'best', frameon = False)\n",
        "clean_ax(ax[1])\n",
        "f.suptitle('Constant hazard rate')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung survival function menggunakan Kaplan-Meier\n",
        "kmf = KaplanMeierFitter()\n",
        "kmf.fit(durations=df['Survival_time'], event_observed=df['Status'])\n",
        "\n",
        "# Plotting survival curve\n",
        "plt.figure(figsize=(8, 4))\n",
        "kmf.plot_survival_function()\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Survival Probability')\n",
        "plt.title('Survival Curve')\n",
        "plt.legend(loc='best')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "_8vkoglmQ_cN",
        "outputId": "118439ba-6c56-46d6-abce-32d2383c1de2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Survival function\n",
        "survival_time = df['Survival_time']\n",
        "status= df['Status']\n",
        "ax[1].plot(survival_time, status, label = 'survival function')\n",
        "ax[1].set_xlabel('Time')\n",
        "ax[1].set_ylabel(r'$S(t)$')\n",
        "ax[1].legend(loc = 'best', frameon = False)\n",
        "clean_ax(ax[1])\n",
        "f.suptitle('Constant hazard rate')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "hFHwxmpaRGfn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lz63ozfxJlRg"
      },
      "source": [
        "> **Definition:** It is also natural to define the *cumulative hazard function* as:\n",
        "> \\begin{align*}\n",
        " \\Lambda(t) &:= \\int_{0}^{t}\\lambda(u) du \\\\\n",
        "            & = - \\int_{0}^{t} \\dfrac{d}{du}\\log S(u) du \\\\\n",
        "            & = - \\log S(t)\n",
        "\\end{align*}\n",
        "\n",
        "So we can rewrite the survival and death density functions in terms of this cumulative hazard function\n",
        "\\begin{align*}\n",
        "S(t) &= e^{-\\Lambda(t)}\\\\\n",
        "f(t) &= \\lambda(t)e^{-\\Lambda(t)}.\n",
        "\\end{align*}\n",
        "Note that the hazard function might be of more intrinsic interest than the p.d.f. to a patient who had survived a certain time periotd and wanted to knwo something about their prognosis. There are also other reasons for introducing the hazard functions $\\lambda(t)$ and $\\Lambda(t)$:\n",
        "* **Interpretability:** Suppose T denotes time from surgery for breast cancer\n",
        "until recurrence. Then when a patient who had received surgery visits\n",
        "her physician, she would be more interested in conditional probabilities\n",
        "such as “Given that I haven’t had a recurrence yet, what are my chances\n",
        "of having one in the next year” than in unconditional probabilities (as\n",
        "described by the p.d.f.).\n",
        "*  **Analytic Simplifications:** When the data are subject to right censoring,\n",
        "hazard function representations often lead to easier analyses. For example, imagine assembling a cohort of $N$ patients who just have turned $50$\n",
        "years of age and then following them for 1 year. Then if $d$ of the men\n",
        "die during the year of follow-up, the ratio $d/N$ estimates the (discrete)\n",
        "hazard function of $T$ =age at death. We will see that $\\Lambda(·)$ has nice\n",
        "analytical properties.\n",
        "* **Modeling Simplifications:** For many biomedical phenomena, T is such\n",
        "that $\\lambda(t)$ varies rather slowly in t. Thus, $\\lambda(·)$ is well-suited for modeling.\n",
        "\n",
        "The **Expected Survival Time** or life expectancy is given by:\n",
        "$$\\mu := \\mathbb{E}[T] = \\int_{0}^{\\infty} t f(t)  dt$$\n",
        "after integrating by parts, and making use of the fact that $-f(t) = d/dt S(t)$, we get:\n",
        "$$\\mu = \\int_{0}^{\\infty}S(t)dt.$$\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FmEjiSZNJlRn"
      },
      "source": [
        "\n",
        "## The Likelihood Function for Censored Data\n",
        "Suppose we have a *cohort* of $N$ observations governed by a survival function $S(t)$ with *death* density $f(t)$ and hazard $\\lambda(t)$. If the $i$-th subject is observed at time $t_i$ and the subject died, its contribution to the likelihood function is:\n",
        "$$L_i = f(t_i) = S(t_i)\\lambda(t_i).$$\n",
        "If the subject is alive at time $t = t_i$, all we know is that the survival time $T$ of subject $i$ exceeds $t_i$. The likelihood of this event is:\n",
        "$$L_i = S(t_i),$$\n",
        "the contribution to the likelihood of a censored observation.\n",
        "\n",
        "Let $d_i\\in \\{0,1\\}$ be the death indicator variable for the $i$-th observation, that takes the value $1$ if the subject died and $0$ otherwise. Then, we can write the likelihood function as:\n",
        "$$\\mathcal{L}= \\prod_{i = 1}^{N}L_i = \\prod_{i=1}^{N}\\lambda(t_i)^{d_i}S(t_i).$$\n",
        "This leaves for the log-likelihood:\n",
        "$$\\log\\mathcal{L} = \\sum_{i = 1}^{N}\\left\\{d_i\\log\\lambda(t_i)- \\Lambda(t_i)\\right\\}.$$\n",
        "\n",
        "> **Example:** Let us go back to our good old exponential distribution example. The hazard rate function is constant $\\lambda(t)=\\lambda$. Then, for the cumulative hazard we have $\\Lambda(t) = \\lambda t$. The log-likelihood then reads:\n",
        ">$$\\log\\mathcal{L} = \\sum_{i}^{N}\\left\\{d_i \\log\\lambda - \\lambda t_i \\right\\},$$\n",
        ">if $D = \\sum_{i}^{N} d_i$ is the total number of deaths and $T= \\sum_{i}^{N}t_i$ is the total observation time. We can write the log-likelihood as:\n",
        ">$$\\log \\mathcal{L} = D \\log\\lambda - \\lambda T.$$\n",
        ">We obtain a score function by diferentiating this expression with respect to $\\lambda$:\n",
        ">$$u(\\lambda) = \\dfrac{d}{\\lambda} - T,$$\n",
        ">setting this score to zero gives the maximum likelihood estimator of the hazard:\n",
        ">$$\\hat{\\lambda}_{ML} =\\dfrac{D}{T} $$\n",
        ">the total number of deaths divided by the total duration time, a.k.a. death rate. The expected information is obtained from:\n",
        ">\\begin{align*}\n",
        "I(\\lambda) &= -\\dfrac{d^2}{d\\lambda^2}\\log\\mathcal{L}\\\\\n",
        "            &=\\dfrac{D}{\\lambda^2}.\n",
        "\\end{align*}\n",
        "> using the maximum likelihood estimate $\\lambda_{ML}$ we get an estimator for the variance:\n",
        ">$$\\widehat{\\text{var}}(\\hat{\\lambda})=\\dfrac{D}{T^2},$$\n",
        "> which is used as a confidence interval for $\\lambda$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bbj84KpxJlRo"
      },
      "source": [
        "## Approaches to Survival Analysis\n",
        "\n",
        "### Estimating the Survival function\n",
        "We could be tempted to estimate this quantity as:\n",
        "$$\\hat{S}_{\\text{Naive}}(t) = \\dfrac{n_s(t)}{n},$$\n",
        "where $n_s(t)$ is the number of subjects surviving beyond $T=t$ and $n$ is the total number of subjects. But note that in the presence of censoring this estimator cannot be used since the numerator is not always defined. To see this consider the data in the example below: the subject indexed as `13` has a survival time $T=25$ days but the response variable `status` has a value of $0$ which means the observation was censored at the 25th day. For this subject we do not have information about the occurrence of the event. The only thing we know is that the event has not occurred for the 25 first days of observation, point at which we have lost track of the subject. This right censoring does not allow us to calculate the real number of surviving subjects, the numerator of the $\\hat{S}_{\\text{Naive}}(t)$ estimator.\n",
        "\n",
        ">To illustrate the survival function estimation, we will use a dataset concerning **Veteran's Administration Lung Cancer Trial** dataset. It consists of a randomized trial of two treatment regimes for lung cancer. The dataset contains the following variables:\n",
        "* Treatment: denotes the type of lung cancer treatment; standard and test drug.\n",
        "* Celltype: denotes the type of cell involved; squamous, small cell, adeno, large.\n",
        "* Karnofsky_score: is the Karnofsky score.\n",
        "* Diag: is the time since diagnosis in months.\n",
        "* Age: is the age in years.\n",
        "* Prior_Therapy: denotes any prior therapy; none or yes.\n",
        "* Status: denotes the status of the patient as dead or alive; dead or alive.\n",
        "* Survival_in_days: is the survival time in days since the treatment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GoSaxS_0JlRo"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv('data/healthcare/veteran.csv')\n",
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Utf-yPkyJlRo",
        "outputId": "37ef82ce-d37a-4495-c12f-86dee04aa18f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>time</th>\n",
              "      <th>status</th>\n",
              "      <th>karno</th>\n",
              "      <th>diagtime</th>\n",
              "      <th>age</th>\n",
              "      <th>prior</th>\n",
              "      <th>trt</th>\n",
              "      <th>celltype</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>40</td>\n",
              "      <td>58</td>\n",
              "      <td>63</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>49</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>30</td>\n",
              "      <td>5</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>80</td>\n",
              "      <td>9</td>\n",
              "      <td>52</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>59</td>\n",
              "      <td>1</td>\n",
              "      <td>30</td>\n",
              "      <td>2</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    time  status  karno  diagtime  age  prior  trt  celltype\n",
              "11     8       1     40        58   63     10    1         1\n",
              "5     10       1     20         5   49      0    1         1\n",
              "32    20       1     30         5   65      0    1         2\n",
              "13    25       0     80         9   52     10    1         1\n",
              "23    59       1     30         2   65      0    1         2"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.iloc[[11,5,32,13,23]]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XuxMaGQsJlRo"
      },
      "source": [
        "Consider our naive estimator $\\hat{S}_{\\text{Naive}}(t)$. From the above table, we can compute $\\hat{S}_{\\text{Naive}}(t=11)= \\frac{3}{5}$. But we cannot compute $\\hat{S}_{\\text{Naive}}(t = 30)$ because we do not know whether subject number 4 (indexed `13`) is still alive at $t=30$, all we know is that the subject was still alive at $t = 25$.\n",
        "\n",
        "### Kaplan-Meier Estimator\n",
        "An estimator that can be used for right censored data (as it is our case) is the so called **Kaplan-Meier** estimator.\n",
        "> **Definition: [Kaplan-Meier]** Let $d_i$ be the number of events at time $T=t_i$. Let also $n_i$ be the number of subjects *known to be survived*, this is, the number of subjects with no event or that are censored up to time $t_i$. The Kaplan-Meier estimator for the survival function is defined as:\n",
        ">$$\\hat{S}_{KM}(t) := \\prod_{i:t_i\\leq t}\\left(1 - \\dfrac{d_i}{n_i}\\right)$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JOr4xuwtJlRo"
      },
      "outputs": [],
      "source": [
        "from sksurv.nonparametric import kaplan_meier_estimator"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jzhAtaoZJlRo",
        "outputId": "155c5497-770a-4698-990c-0417a60aed6f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1440x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Event variable\n",
        "E = df['status']\n",
        "x_age, y_age = kaplan_meier_estimator(E.astype(bool), df['age'])\n",
        "x_time, y_time = kaplan_meier_estimator(E.astype(bool), df['time'])\n",
        "f, ax = plt.subplots(1, 2, dpi = 120, figsize = (12, 4))\n",
        "# By age\n",
        "ax[0].step(x_age, y_age, where=\"post\")\n",
        "ax[0].set_ylim(0, 1)\n",
        "clean_ax(ax[0])\n",
        "ax[0].set_ylabel(r'$\\hat{S}_{KM}(t)$')\n",
        "ax[0].set_xlabel('Age [years]')\n",
        "ax[0].set_title('Kaplan-Meier estimate by Age')\n",
        "# By survival time in days since the treatment\n",
        "ax[1].step(x_time, y_time, where=\"post\")\n",
        "ax[1].set_ylim(0, 1)\n",
        "clean_ax(ax[1])\n",
        "ax[1].set_ylabel(r'$\\hat{S}_{KM}(t)$')\n",
        "ax[1].set_xlabel('Time since treatmen [days]')\n",
        "ax[1].set_title('Kaplan-Meier estimate by Age')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LD1UcH6UJlRp"
      },
      "source": [
        "Patients in this study were given two treatments, this information is stored in the `trt` column of the dataset. We can use this flag to investigate the impact of the two different treatments on the above Survival curves:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rAuA8D3rJlRp",
        "outputId": "d60e8527-3b6f-49c5-8fc4-911c13e2f598"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1    69\n",
              "2    68\n",
              "Name: trt, dtype: int64"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['trt'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "16SuTIGLJlRp",
        "outputId": "75190ef4-7435-4697-8678-a4a59471643c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABLkAAAHLCAYAAAAk6UqgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAABJ0AAASdAHeZh94AACUSElEQVR4nOzdeXhTZfr/8U9btra01LIoIkKBimzSQUvdKavgAgKjtKA/xI0BXMdR0QFBKbggbgwgiq0bI4iCgMomFBEYsCJgS0F2WWVfQnfK8/uDbyKhaZu2SZO079d1PZd4cpJz55w0uXPnnOf2k2QEAAAAAAAA+DB/TwcAAAAAAAAAlBVFLgAAAAAAAPg8ilwAAAAAAADweRS5AAAAAAAA4PMocgEAAAAAAMDnUeQCAAAAAACAz6PIBQAAAAAAAJ9HkQsAAAAAAAA+jyIXAAAAAAAAfB5FLgAAAAAAAPg8ilwAAAAAAADweRS54BIdOnSQMUajRo3ydCheISkpScYYNWrUyNOhlLuBAwfKGKOBAwd6OhSP4G/B9yQnJ8sY4+kwAMApfM7YI+ci5/LGv4XKfmxKqlGjRjLGKCkpydOhoAKgyOWDjDGFfiFr2rSptm/fLmOMxo4dW86ReR/rh58xRjt37pSfn5/D9YKDg3Xq1CnbupUxUXKWNycURdm1a5d27drl6TDK1QcffCBjjDIyMlSrVi1Ph+PzrMUwZ4enE7WK9pr31fce+DZyLueRc7mer77vVbTPH0d89dj4OmsxrCSjQ4cOHou3Ir5OfOGHhSqeDgCu065dO33//feqU6eOHnvsMU2aNMnTIXmNvLw8RUREqEuXLlqyZEmB2+Pi4hQaGqq8vDxVrVq1zNt74YUX9Nprr2n//v1lfixfM2fOHK1Zs0YHDx70dCiVWs2aNRUXF6dz584pKChI9913H+8JZfTxxx9r+fLldsvuvvtuRUVF6ZtvvtGGDRvsbrv4/wFUHORchSPnKj/kXN6LY+MeJ0+e1OjRowssty5zdNvu3bvdGhO8D0WuCqJz586aM2eOqlWrpri4OH311VeeDsmr/PDDD+rYsaMeeeQRhwnXI488ogMHDmjPnj26/vrry7y9P//8U3/++WeZH8cXnT59WqdPn/Z0GJVe//79FRISorfeekvDhg3TI488wpewMvrkk08KLGvcuLGtyOXodgAVDzlX0ci5yg85l/fi2LjHqVOn9PLLLxdYbi1uOboNlQ+XK1YA/fr103fffadz586pe/fuBZKt0NBQ/etf/9LSpUu1d+9e5eTk6PDhw5o7d65iYmIcPqYxRsnJyapfv74+/fRTHTp0SJmZmfrll18UHx/vdGzt2rXTO++8ow0bNujYsWPKysrS1q1b9eabbyosLKzA+hdevx4bG6vk5GSdPn1ap06d0rfffqurr766RPvG6tixY5o9e7Z69eqlOnXq2N3Wpk0bxcTEKCkpSWfPni30MZo3b66kpCTt2bNH2dnZ+vPPPzV9+nRdddVVBdYt6jTO9u3ba9asWTp48KBycnK0Z88evf/++6pfv36Bda2XR1WtWlUjR47Uli1blJ2d7fRlUCWJuV69eho/fry2bNmiM2fO6MSJE9qyZYuSkpIUERFhe17WM1lGjx7t8FTgwuYgsJ66HhwcrLfeekt79uxRZmam1q9fr169ekmSAgIC9MILL2jr1q3KysrS9u3bNWzYsAKxVq1aVcOGDdN3332n3bt3Kzs7W8eOHdOSJUvUvXt3u3Wtpwk3btxYjRs3LvJyspLsL2dcf/31WrJkiU6ePKnTp09r4cKFuvbaa+3WefXVV2WM0f333+/wMdq1aydjjObNm1eibT/yyCPKz8/X22+/rW+//VZt27ZV+/btC10/MjJSX331lY4fP64zZ85o1apVuv3224ucU6JBgwaaOHGiduzYoezsbB09elRz587VddddV6JYBw4cqK+++ko7duxQZmamTp06pZUrV2rAgAEO17f+XVz4esnOztaePXv02muvFXpmQL9+/fTLL78oMzNThw4d0qeffurw784VRo0aZfu7iI+P15o1a2SxWOwu3wgMDNTw4cO1fv16nTlzRhaLRatXr1ZcXFyBx3PHa976Pl+vXj199NFH+vPPP23H/uabb5YkBQUF6Y033rBtMy0tTX//+98Lfd5xcXFatmyZjh8/rqysLKWnp+vf//63qlWrVmBd6/Zr166tqVOn6sCBA7ZtPPDAA3brOvPeA5QHcq7ikXORc1X0nMtbjo1Vt27d9N133+nIkSPKzs7W9u3b9cYbb5Roqor69etr5MiRWrlype3vZf/+/Zo+fbrD94IL59Bq1KiRvvjiCx05ckRZWVlKSUnRHXfc4XA7NWvW1IQJE7R3715lZWVp8+bNevrpp+Xv756yhHV/h4SEaMKECdq1a5dyc3PtLh8syWsxMjJSr776qlJSUnT48GFlZ2dr9+7dmjp1qho0aGC3bklfJ126dNGKFStksVh0+PBhJSYm2o5hVFSU5s+fr+PHj8tisWju3LmFXi54ySWXaNy4cUpPT1dmZqZOnjypH374QV27di2wbkk/B4wxthxt9+7dtufjbZcncyaXj3viiSf09ttv69ChQ+rRo4c2btxYYJ0WLVpo7NixWrFihb777judOHFCV155pXr27KkePXrorrvu0qJFiwrc75JLLtHq1at18uRJJSUlKSwsTPfee6/++9//qkGDBnrzzTeLje+RRx5R79699eOPP+qHH35QQECA2rVrp2eeeUY9evRQTEyMzpw5U+B+d955p3r16qUFCxbo/fffV8uWLXXHHXcoOjpaLVu21LFjx0q8rz788EP1799fAwcO1IQJE+xiPHfunD766KNCvyzddtttmj17tqpWrar58+dr+/btuuKKK9SnTx/dcccd6tixo9avX19sDA888IA+/PBD5eTkaN68edq7d68iIyP18MMP66677tL111+vvXv3Frjf119/rejoaC1YsEDffPONDh8+XOy2ShJzYGCgVq1apWbNmmnx4sWaP3++/Pz81KhRI/Xq1UtfffWVdu3apW+++cb2PJYvX2536ZYzpwJXrVpVS5YsUXh4uObOnatq1aopPj5eX3/9tbp166ahQ4cqJiZGCxYsUE5Oju655x795z//0ZEjR/Tll1/aHic8PFzvvvuuVq9erSVLlujIkSOqX7++7rrrLi1YsEAPP/ywPvroI1tco0eP1lNPPSVJeuedd2yPc+HlZK46xlYxMTF64YUX9MMPP2jSpElq1qyZ+vTpo1tvvVXdunXTypUrJUnvv/++nn32WQ0ePFifffZZgccZPHiwJGnq1KlObzsqKkrXXXedFi9erH379unjjz9W37599eijj+rnn38usH7z5s21atUq1a5dW99++61+++03NWnSRHPmzNH333/vcBt/+9vftHjxYoWHh2vRokWaPXu26tSpo7vvvlsrV65U7969tWDBAqfinTJlitLT07VixQodPHhQtWvX1u23367PP/9czZs310svveTwfv/97391yy23aMGCBTp9+rRuv/12Pf/886pXr54efPBBu3Wfeuopvf322zpx4oQ+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z549FRsbq23btumnn34qcJ8pU6ZIOn/JSUhIiD744INCf326WI0aNTRgwACdPXtWAwYM0COPPOJwfP311woJCbH92rRv3z4lJycrMjLS9kum1W233VZgPi5Jmjt3rrZv365hw4apR48eDuO5/vrrC8zZ4Uhh7xPdunWz/cpdVtOnT1dubq4ef/xxu9e5n5+fxo8fX+4f0keOHNH06dMVHR2tESNGONx+kyZN7E55d/Vr3tXeeustVa9eXYmJiQ4vqwoLC3NqTqGieMN7D0DOVTLkXORcF6sIOZfkHcfm7bfflnT+DMmL33MkKSgoyG4OzcIcPnxYGRkZuvbaa20/gkrn35feffdd21xOZZWUlKSAgIBC3+vKW0lfi9b32Ztvvln+/n+VUYKDg/Xhhx8WmMNMKt/Xybp167RixQr16dNHgwYNcrhO69aty3w8veG1XxwuV6xAhgwZoqysLD399NP66aef1KlTJ23fvl1vv/22pk6dqvXr1+vrr79WXl6ebrrpJrVs2VLz5s1Tz549HT7exo0bFRMTo3Xr1mnx4sWqVauW+vXrp0suuUTPPvusw0kDL5SSkqKVK1eqb9++WrVqlVauXKlLL71UPXr00O+//26bMM8T1q9fX+yvolbHjx/X3//+d82ZM0dr1qzR0qVLtWnTJp07d05XXnmlbrjhBtWuXbvYL/S///67HnzwQSUmJmrTpk1auHChtm7dqqpVq+rKK6/ULbfcoiNHjjicDLCkShpzly5d9NZbb2n16tXasmWLDh8+rCuuuEK9evVSfn6+xo8fb/c89u3bp7i4OOXm5mrPnj0yxuizzz7Tnj17yhy7M9555x11795dK1eu1JdffqlTp07puuuu080336xZs2Y5nIBz6dKlat++vRYuXKgVK1YoJydHGzdu1LfffuuyY3yhBQsWaMKECerRo4c2btyoZs2aqU+fPsrKytJDDz3kMJFavXq1NmzYoKioKOXm5ioxMdHp7Vn/NufNm1fkfBLTpk3T/fffr0cffdQ2ueqwYcO0atUqTZkyRbfffrt+++03NWnSRH379tU333yju+++225S0bNnz6pPnz5atGiR3YS5mZmZatiwoaKjo9W0aVNddtlltnkKCjN58mQNGjRIs2bN0tdff639+/erdevW6t69u7788kvFxcU5vQ8K88cff2j48OF66623tH79es2cOVOnTp3SbbfdprCwMG3cuFFt27Yt83ZK4rHHHlNkZKTGjBmj+++/XytXrtShQ4d0+eWXq0WLFmrfvr3i4uJsCZWrX/OulpSUpGuvvVbDhg3Tjh07tGjRIu3Zs0fh4eGKiIjQrbfeqqSkJA0ZMqTU2/CG9x7AipzLeeRc5FwVLeeSvOPYLFu2TM8//7xeffVVbdu2Td9//7127dqlmjVrqlGjRurQoYNWrlxZ6A+SVsYYvffee3rhhReUmpqquXPnqlq1aurYsaPCw8O1bNkyderUqczxTpgwQXfffbf+/ve/69dff9WiRYts73UrVqxQr169yryNkijpa/HQoUP64osvFB8frw0bNtjeq7t27ars7GytX7++wA965f066d+/v5YtW6bExEQ98cQTWrt2rU6ePKkrrrhC11xzjdq0aaPrr79eR44cKfU2li5dqueee04ffvihvvrqK505c0YnT5706A8qjni8xSOjZKOwFqnWkZCQYIwx5sCBA7aWsgMHDjTr1683Z86cMUeOHDGzZ882rVu3trVr7dChQ4FtJCcnm/r165vPPvvMHDp0yGRlZZl169aZ+Pj4AtssrD3qJZdcYiZNmmR27dplsrKyzPbt283YsWNNYGCgw/bChbXbvTguZ/fVxe2sixuO2llbR6NGjczEiRPN1q1bTVZWljl16pTZvHmz+fTTT02vXr3s1i2qtWrr1q1NUlKS2b17t8nOzjbHjh0zqamp5v333y/QMtja+ri0rxVnY7766qvNhAkTTEpKijl8+LDJzs42u3btMrNmzTI33HBDgce97rrrzA8//GBOnjxp8vPz7V5DRbVMLqyddFHPs7B9eccdd5j//e9/5vTp0+bEiRNm0aJF5pZbbil0+0FBQWby5Mlm7969Ji8vzxhTsE1xSY5xca+5UaNGmeuvv94sWbLEnDp1ypw+fdosWrTIXHfddUXe39rOuLD2v4WNlStXGmOMueuuu4pdd8uWLcYYY6KiomzLmjdvbr7++mtz4sQJc+bMGbN69Wpz++23m2eeecYYYxw+/7p165pXX33VpKammoyMDGOxWMzWrVvNrFmzzIABA0xAQIBTsd9www1m6dKl5vjx4+b06dPmp59+Mr169Sr0faWo10tR7yFxcXFm3bp1Jisryxw+fNh89tlnpn79+mX6O7O+Pi/eXmHvrReOqlWr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QBlj1KhRo3LZnjFGo0aNKpdtoeKwWM5fphhU3V9NQvPUo20tD0cEAPBV5F/lhzO5UICzE9k3aB6pwNAQJmIFAB/Sv39/tW7dWu+++66nQwG8WsKYGZKkzt2uU1B1f1Wv6ufhiAAAvor8q/xQ5EIBzk5kPyRxkppFtyuHiAAAKFxgYKCyspgcHK6VkrJNvXqO0ZYDs3RV/RqeDgcAAK/irfkXlysCAFCB1KlTR1OnTtWePXuUnZ2tw4cPa+XKlercubOSk5N15513qnHjxjLG2IbVSy+9pDVr1ujYsWM6deqU1q1bpwcffLDANnbt2qX58+frtttu07p165SZmanNmzdr0KCCl6/HxMRo5cqVysrK0v79+zVu3DhVrVq1wHr33nuvFi1apAMHDigzM1Pp6el69dVXFRRkf7ZwUlKSLBaLWrdurUWLFun06dNaunSpJCkkJEQffPCBjh49KovFogULFigyMrKsuxQAAKBI5F/ek39xJhcAAJJ6PfeULr/aOwoiB7Zs09w33inVfT/77DO1a9dO//73v7V161aFhYWpXbt2ql27toYOHaoPPvhATZs2Ve/evQvct3HjxrYETZKuv/56TZw4UQ0aNNCYMWPs1m3btq0mTJig1157TYcOHdLDDz+sxMREbd++XT/99JMkqUWLFlq6dKl2796tBx54QJmZmRo6dKj69+9fYNuRkZH6/vvv9c477ygjI0NXX321nn/+ebVv316dO3e2W7datWqaN2+epk6dqtdee01VqpxPZ7755hvdeOONeuWVV5SSkqKbbrpJCxYsKNV+BAAA5aMi5GDkX96Tf1HkQrmIiorQsuRxRa5jsWQpYcwMpaRsK6eoAOAvl18dWSEuwb7ppps0bdo0TZs2zbZs3rx5tn+fPHlSOTk5Wrt2bYH7XviroZ+fn5YvXy4/Pz89+eSTBZKsOnXq6KabbtLevXslSStWrFDnzp3Vv39/W5L10ksvyc/PT506ddLhw4clSd99953S0tIKbHvs2LF2/79q1Spt3rxZK1asUJs2bZSammq7rVq1anrllVf08ccf25bddttt6tSpk5544glNnDhRkvTDDz8oNzdX48YV/fkDAAA8pyLkYORf3pN/UeSCW1k7E4WF1VRsbBun7tOr55jiVwIAFzuwxXsK7GWJ5eeff9YDDzygY8eO6YcfftC6det09uxZp+7bsWNHvfjii4qOjlatWvad5OrVq2dLlCRpw4YNtgRLknJycrR161a7jj0dO3bU0qVL7e537tw5zZw5U6NHj7Z7/IiICCUkJKhTp06qV6+e/P3/mlGhRYsWdkmWJH399dcFYpek6dOn2y3/73//S5ELAAAvVhFyMPIv78m/KHLBraydiUJCAotcLyoqQmFhNYtdDwDcpbSXB3qbfv36acSIEXr44YeVkJAgi8WiOXPm6LnnntOhQ4cKvV90dLQWL16s5cuX65FHHtG+ffuUm5uru+++WyNGjFBgoP3787Fjxwo8Rk5Ojt16tWvX1p9//llgvYuXBQcH66efflJ2drZGjBihrVu3KjMzUw0bNtScOXMKbDsjI0MWi8VuWe3atZWXl6fjx48XuS0AAOBdKkIORv7lPfkXRS64lbUzUXGWJY9z+kwvAEDhjh07pqefflpPP/20GjZsqJ49e+q1115TvXr11KNHj0LvFxcXp7y8PN15553KycmxLb/77rvLFMtll11WYPnFyzp16qQGDRqoQ4cOWrFihW15WFiYw8e9cLLWC7dVtWpVhYeH2yVajrYPAADgSuRf3pN/0V0RAIAKau/evZo0aZKWLFmidu3Oz3Vx8a99VsYYnT17Vvn5+bZlNWrU0P3331/q7ScnJ6tz586qV6+ebZm/v7/69etXYNvW2C40ePDgEm1LkgYMGGC33NEkqwAAAO5C/uXZ/IszueBVnJmg3llMZA+gsgkNDVVycrL++9//asuWLbJYLIqOjlb37t01e/ZsSVJqaqr69u2rf/zjH1q3bp3OnTundevW6bvvvtMzzzyj//73v/rggw9Uu3Zt/etf/yqQ+JREQkKCevbsqWXLlumVV15RZmamhg0bpuDgYLv1Vq9erePHj+v999/Xyy+/rLy8PA0YMEBt27Z1eluLFy/Wjz/+qDfeeEPBwcH65ZdfdNNNN5UpSQQuFBhaUw1bt9TetHRPhwIA8CLkX96Vf1HkglcozQT1zmIiewCVRXZ2ttauXav7779fjRs3VtWqVbVnzx69/vrreuONNyRJ7777rlq1aqVx48apVq1a8vf3l5+fn5KTkzVo0CA9//zzmj9/vvbv368PP/xQhw8fVmJiYqni2bRpk7p06aIJEybok08+0YkTJ/TZZ5/p66+/1ocffmhb7/jx47rjjjs0YcIEff7558rIyNDcuXPVr18/rV+/3qltGWPUs2dPvfXWW3ruuedUrVo1rVq1Srfffrt+//33UsUPSJI5d872766DBynx8Wc9GA0AwNuQf3lX/uUnqeCFlXBay5YttWnTJrVq1Urp6ZXrl70hiZPULLqdtqf8qikPDivTY0VHR2rEyDiXTTxvnch++fJUder4okseEwAAeI/yysFW/fyObohuqr0ZVfTalzvLnPMAAAD34UwueAVnJ6h3FhPZAwAAV8jJyPR0CAAAwElMPA8AAAAAAACfx5lcKLMGzSM1JHFSuW0vJyNTS6YmMfErAAAAAACwociFUrOevh8YGqJm0e3KffvOTPzqTLdGujACAAAAAOD7KHKh1JZMTZIkVQ8OKrdtNmgeqcDQkGK3WZpujXRhBAAAAADAd1HkQqntTUsv9zba1o6OxUkYM0OSiu3WaO3C6KqujgAAAAAAwDMocqFCcrZbI10YAQAAAACoGChywSc5M9k9E9QDAABXahbdTg1btyS3AADAS1Hkgk8pzWT3rpignsnpAQCo3OrWyNffI06q07yRerTfS+QEAAB4IYpc8CnOTnbvrgnqmZweAIDKxZor1Agwahh8Vg0jamrEyDhyAgAAvBBFLvgUZye7d+UE9UxOD8BX3HDDDerWrZveeecdnTp1yi3bGDJkiDIzM/XJJ5+45fEBb2PNFZpfd42urBeoGgGGnAAAYIcczHtQ5EKl5swE9UxOD8BX3HjjjRo9erQ+/vhjtyVYQ4cO1dGjR0mwUGlYc4UhiZM0/N4mahh81tMhAQC8DDmY9/D3dAAAAAAAAABAWVHkApxknZy+qDF33khFR0d6OlQAldCoUaP05ptvSpJ2794tY4yMMerQoYMk6d5779Xq1at15swZWSwWLVy4UFFRUXaPERERoS+++EL79+9Xdna2/vzzT/3www9q27atJGnXrl1q3bq1YmNjbY+/a9eucn2egDeIjW3D5z0AQBI5mLfhckWgGCWdnF5ignoA5W/atGkKDw/XE088od69e+vgwYOSpPT0dL3wwgtKSEhQUlKSEhISVK1aNT377LP66aef1L59e23evFmS9P333ysgIEDPPfec9uzZozp16ujGG29UWFiYJKl379766quvdOrUKQ0dOlSSlJOT45HnC3hCXr6f7d9MPg8AkMjBvA1FLqAYzkxOLzFBPeDr3n77YbWNauLpMCRJGzfs1NNPTyvRffbv3689e/ZIktavX68//vhDknTFFVfo5Zdf1n/+8x89+eSTtvWXLFmibdu2adSoUYqLi1N4eLiuvvpqPfnkk5o+fbptvTlz5tj+vWHDBmVlZen06dNau3ZtWZ4i4JPWHAlSk9Dzc63weQ8ArkEORg7mShS5gGI4Mzm9xAT1gK9rG9WkQv4N33bbbapatao+/fRTBQQE2JZnZ2frxx9/VMeOHSVJx48f1/bt2/Xss88qICBAycnJ2rhxo4wxngod8DqHsqpq68FsXVW/hqdDAYAKgxyMHMyVKHIBAKDzv9x5C1fGcumll0qSfvnlF4e35+fn2/7duXNnvfTSS3ruuef01ltv6dixY5o+fbr+/e9/68yZMy6LCQAAwIocjBzMlShyoUJr0DxSQxInFblOTkamlkxN0t609HKKCoA3Kump6b7i6NGjkqS+ffvaTp8vzJ49e/Twww9LkiIjI3Xvvfdq9OjRqlatmoYMGeL2WAEAQOVDDkYO5koUuVAh5WRkSpICQ0PULLqdU/dJfPxZl2zb2oXRG1ksWUoYM0MpKds8HQoAN7BOQBoY+NdcQYsWLVJeXp6aNm2q2bNnO/1Y27Zt09ixY9W3b1+1a/fX+2hOTo7d4wMAAFR25GDegyIXKqQlU5MkSdWDg4pcr0HzSAWGhhS7njNK04XRU+gGBVRMqampkqQnn3xSn3zyifLy8vT777/rpZde0tixY9WkSRMtXLhQJ06c0KWXXqr27dsrIyNDo0ePVps2bfSf//xHs2bN0rZt25Sbm6tOnTrpmmuu0WuvvWa3jbi4ON17773auXOnsrOzlZaW5qmnDAAA4HHkYN6DIhcqpL1p6U6dmTUkcZLTZ3oVx9kujJ5C90eg4vvxxx81btw4DRw4UI888ogCAgIUGxur1157Tenp6XryyScVHx+v6tWr688//1RKSoref/99SdKff/6pHTt2aOjQoWrYsKGMMdq5c6eeeeYZTZw40baNUaNGqX79+vrwww8VGhqq3bt3KyIiwlNPGQAAwOPIwbyHnySm7C+Dli1batOmTWrVqpXS05nTyddYi1zbU37VlAeHeToct7J2f1y+PFWdOr7o6XAAACiT8s7BrDnDHbX36ar6Nfg8BQDAC/l7OgAAAADAVwSG1vR0CAAAoBAUuQAAAIBiWJvaWMXGtlF0dKSHogEAAI5Q5AIAAACKYW1qk5fvZ1s2YmScp8IBAAAOUOQCAAAAirE3LV3bU37VmiN/dWSmmQsAAN6FIhcAAADgpENZVbX1YLanwwAAAA5Q5AIAAABKgMnnAQDwThS5AAAAACdcPPk8AADwLlU8HQCA8hUVFaFlyeMKvd1iyVLCmBlKSdlWjlEBAOD9lkxNUqvYmz0dBgAAKARFLqCSsFiyJElhYTUVG9um2PV79Rzj7pAAAPAp1snnFdHE06EAAAAHKHIBlUTCmBmSiu4EFRUVobCwmnSLAgAAAAD4HIpcgKQGzSM1JHFSmR8nJyNTS6YmaW9auguicq2UlG3Fnp21LHmcU2d5AQAAqXpwkKdDAAAAF6DIhUrNOoFsYGiImkW3c9njJj7+rMseCwAAeI8LJ58Pv7y+ByMBAAAXo8iFSm3J1CRJrvkltkHzSAWGhvCrLgAAFdiSqUkaNWiCJMnPn0blAAB4E4pcqNT2pqW77KyrIYmTXHo2GAAA8D5709KVdfqMFFzD06EAAICL8PMTAAAAAAAAfJ5PFrmCg4P19ttva//+/crKytL69evVr18/p+4bGxurxYsX69ChQ7JYLNq4caMef/xx+XO6OQAAQJHIwQAAgDfzycsVZ8+erejoaA0fPlxbt25V//79NWPGDPn7++uLL74o9H6dO3fWokWLtGLFCj3yyCPKyMhQz5499d5776lp06Z66qmnyu9JoMJyplOjN3dhBACgMORgAADAm/lckatHjx7q1q2b4uPjNWPGDEnS8uXL1ahRI40fP14zZ87UuXPnHN73gQceUF5enu68805lZp7vjLN06VI1b95cDzzwAAkWyqQ0nRrpwggA8BXkYAVdVb+GoqMjlZKyzdOhAAAA+WCRq3fv3rJYLJo1a5bd8qSkJH3xxReKiYnR//73P4f3zcvLU25urrKysuyWnzx5UtnZ2W6LGZWDs50afaELY1RUhJYljytyHYslSwljZpDYA0AlQQ72l5w8Y/v3iJFx6tVzjAejAQAAVj5X5GrdurU2b96s/Px8u+W//fab7fbCEqz3339f8fHxeu+99zRu3DhlZmbqrrvuUu/evfXCCy+4PXZUbM52avTmLowWy/kvH2FhNRUb28ap+5DYA0DlQA72lwUbT6nNlYGSpJCQQA9HAwAArHyuyFW7dm3t3LmzwPLjx4/bbi/Mzz//rE6dOmnWrFl67LHHJElnz57VCy+8oLfeeqvYbdetW1d169a1W9a0adOShA94tYQx5y8/KS5hj4qKUFhYTRJ7AKhEyMH+8sfRXO3NqKKGwWc9FgMAACjI54pckmSMKdVt7dq105w5c7R27VoNHjxYGRkZ6tSpkxISElSjRg0lJCQUud2hQ4dq9OjRpQ0bsOONE9SnpGxz6sysZcnjnD7TCwBQcZCDFeTN0w8AAFDZ+FyR69ixYw5/KQwPD5f016+JjkyaNEmHDh1S7969bROjLl++XOfOndPo0aM1ffp07dq1q9D7T548ucA8FE2bNtW8efNK81RQSTFBPQDAF5GD/cX6WS5J4ZfX90gMAACgIJ8rcqWmpio+Pl4BAQF2c0K0aXP+rJK0tLRC7xsVFaUvvviiQOeflJQUBQQEqEWLFkUmWEeOHNGRI0fK+AxQ2TFBPQDAF5GD/WXJ1CSNGjRBkuTn7+/haAAAgJXPFbnmzJmjRx99VH379tWXX35pWz5w4EDt379fa9euLfS+Bw4c0HXXXSd/f3+7JOuGG26QJO3bt899gQP/hwnqAQC+iBzsL3vT0pV1+owUXMPToQAAgAv4XJFr4cKFWrx4saZMmaLQ0FBt375d8fHx6tGjhwYMGGBLnKZNm6aBAweqadOm2rNnjyTp7bff1sSJEzV//nxNnTpVmZmZ6ty5s5555hktWbLE1h0IQNGYoB4AKh9yMAAA4O18rsglSX369NHYsWP1yiuvKDw8XFu2bFFcXJxmzpxpWycgIEBVqlSRn5+fbdl//vMf7d+/X08//bSmTZumwMBA7d69Wy+//LLefvttTzwVoFhMUA8A8BbkYAAAwJv5SSq8FQ6K1bJlS23atEmtWrVSenr5FBhQOTw4cbxaxd7s9Pqblq/0ugnqrUWu5ctT1anji54OBwBQgXg6B9tyYJauql9DmTnntHTxL8w/CQCAF/DJM7mAyqAiTVAPAEBFk5N3/nfioOr+uuuu9pKYfxIAAE+jyAV4qYowQb2VM10YnUW3RgCAN1iw8ZSCw0J1WfUcBVX3Z/5JAAC8AEUuAG5Tmi6MzuLXcgCAJ/1xNFdz99TSHbX36ar6dFkEAMAbUOQC4DbOdmF0Ft0aAQDeJjC0pqSzng4DAACIIhcAN3K2C6Oz6NYIAPAWORmZng4BAABcxN/TAQAAAAC+xtogBgAAeA+KXAAAAEAJ7U1L1/aUXz0dBgAAuABFLgAAAAAAAPg8ilwAAAAAAADweUw8D1QQDZpHakjipCLXycnI1JKpSdqbll5OUQEAUDnUj2yqhq1b8hkLAIAHUeQCfJy1u1NgaIiaRbdz6j6Jjz/rzpAAAKgULuywGBQWqq6DB/EZCwCAB1HkAnyctbtT9eCgItdr0DxSgaEhxa4HAACcs2Rqkp7tPUr6v89WPmMBAPAsilyAj9ublu7Ur8ZDEic5faaXt4uKitCy5HGeDqMAiyVLCWNmKCVlm6dDAQCUg71p6Tq4bYeaN2jj6VAAAIAocgHwIRZLliQpLKymYmO99wtFr55jPB0CAAAAAFQ6FLmASqa4Ceq9eXL6hDEzJEkhIYEejqSgqKgIhYXV9MrYAADlo0HzSD04cbzXfo4CAFDRUeQCKomSTlDvjRPnpqRs89qzpJYlj/Pqs8sAAO4XGBqiVrE3S/LOz1EAACo6ilxAJeHMBPVMTg8AQOlknjytrNMBfI4CAOBBFLmASsKZCeor0uT0AACUp4Pbdmj/rlp8jgIA4EH+ng4AAAAAAAAAKCvO5AJQQHGT05eEN09kDwAAAACoOChyAbAp6eT0JcEEvAAAAAAAd6LIBcDGmcnpS4KJ7AEAAAAA5YUiFwAbZyanLwkmsgcAAAAAlBcmngcAAAAAAIDP40wuAG7nzET2TFAPAAAAACgLilwA3KY0E9kzQT0AwNc1aB6pByeO58cbAADKGUUuAG7j7ET2TFAPAPB1UVERuqSRtOlcng4pRK1ib5bEjzcAAJQnilwA3MbZieyZoB4A4KsslixJUlhYTYWFSdq1X7tP1+bHGwAAPICJ5wEAAIBSShgzQ/Pn/6yTJ89Ikk78sUv7f9/m4agAAKicOJMLAFwoKipCy5LHFbmOxZKlhDEzlJLClyAA8HUpKdvUq+cYLUsep9jYNp4OBwCASo0iFwC4wIWXqzj7JadXzzHuDAkA4GHW7sJ0EAYAoHxQ5AIAF0gYM0OSFBISWOR6UVERCgurWex6AADfFBvbRqsO75ZUsLswk9ADAOBeFLkAwAWsl6sUh8tZAKBisp7RK0kx9TI1Y/lKVQ8OooMwAADliInnAQAAgDKyntErSVWUr8THn9WUB4cxCT0AAOWIIhcAAABQRikp27R8eaqnwwAAoFLjckUA8IDiujDSgREAKhbrJPSSmIgeAAA3ocgFAOWopF0Y6cAIAL4tJyNTUsFJ6CUmogcAwNUocgFAOXKmCyMdGAGg4lgyNUmSbBPPMxE9AADuQ5ELAMqRM10Y6cAIABXH3rR0uzO2hiROKnBGFwAAcA0mngcAAAAAAIDP40wuAF7jwkl5y4IJfQEAAACg8qHIBcDjipqUtyyY0BcA4K2aRbdTw9Yt+UEGAAAXosgFwOMunpS3LJjQFwDgabGxbRQdHamUlG0FbrP+sCNJXQcP4gcZAABciCIXAI+7eFLesmBCXwCAp1gsWbZ/jxgZ57DRyJKpSWoVe7Mk1/y4AwAA/sLE8wAAAIALJIyZYft3SEigw3X2pqVre8qv5RUSAACVCkUuAAAAwAVSUrZp+fJUT4cBAEClRZELAAAA8ADr5PMAAMA1KHIBAAAALmadfN6RiyefBwAArkGRCwAAAHCRiyefd8TaVVhi8nkAAFyJIhcAAADgIkw+DwCA51DkAgAAAFyEyecBAPCcKp4OAADcoUHzSA1JnFTkOjkZmVoyNUl709LLKSoAAAAAgLtQ5AJQoVgn8w0MDVGz6HZO3Sfx8WfdGRIAAAAAoBxQ5AJQoVgn8y1uIt8GzSMVGBrChL8AALeJiorQsuRxks5PSJ8wZoZSUrZ5OCoAACouilwAKpS9aelOnZk1JHGS02d6AQBQEtYOi2FhNRUb28butl49x3giJAAAKgWKXAAAAIALWTssWrsrRkVFKCysZqHdFgEAgGtQ5AIAAABcKCVlm90ZW8uSxxU4owsAALgeRS4AlZozXRjL2+XN60kqfl4xAIDvaxbdTg1bt6TTLwAALkCRC0ClVJoujOUlMPSkpLNqe01j24TFhWEiYwDwTdbPIUnqOngQnX4BAHABilwAKiVnuzB6QvbljaVgKah6gNOXtzCRMQD4liVTk9Qq9mZJ3vlZBACAL/LJIldwcLASEhJ07733Kjw8XFu2bNFrr72mmTNnOnX/nj176p///Kf+9re/KSAgQLt379a7776rDz/80M2RA/AWznZh9IRG8z7U3zs01NkMiw78XvgZWkxkDKC8kYO5zt60dG1P+dXrziYGAMCX+WSRa/bs2YqOjtbw4cO1detW9e/fXzNmzJC/v7+++OKLIu/7/PPPa+zYsXr//ff16quvKi8vT1dffbWqVatWTtEDQNH+OJqruXtqaXvKDk158MVC12MiYwDljRwMAAB4M58rcvXo0UPdunVTfHy8Zsw43555+fLlatSokcaPH6+ZM2fq3LlzDu/brl07jR07Vi+88ILGjx9vW75s2bJyiR0AAMBXkYO5D5PPAwDgGv6eDqCkevfuLYvFolmzZtktT0pKUoMGDRQTE1PofR977DHl5ORo4sSJ7g4TAACgQiEHc72LJ58HAABl43NFrtatW2vz5s3Kz8+3W/7bb7/Zbi/Mrbfeqs2bN6tv377asmWLzp49q7179+rVV19V1apVi9123bp11bJlS7vRtGnTsj0hAAAAH0AO5nrWJigSk88DAOAKPne5Yu3atbVz584Cy48fP267vTANGjRQ3bp19d5772nkyJFKT09X586dNXz4cDVs2FD33XdfkdseOnSoRo8eXab4AQAAfBE5mOsx+TwAAK7lc0UuSTLGlOo2f39/hYaGKi4uztYFaPny5QoODtbTTz+tUaNGaceOHYXef/LkyQVO0W/atKnmzZtXwmcAAADge8jBAACAN/O5yxWPHTvm8JfC8PBwSX/9mljYfSVp0aJFdssXLFgg6fykqEU5cuSI0tPT7UZRCRkAAEBFQQ7mXg2aR+rBiePVsHVLT4cCAIDP8rkiV2pqqlq0aKGAgAC75W3atJEkpaWlFXpf65wRF/Pz85OkQjsCAQAAVHbkYGUXFRWhufNGKjo60rbMOvl8YGiIWsXezAT0AACUgc8VuebMmaOQkBD17dvXbvnAgQO1f/9+rV27ttD7fv3115LOt8C+0O233678/HylpKS4PmAAcLOoqAgtSx5X5Lj4SxUAlBQ5WOlZLFmSpLCwmrrrrvYaMTLOdtuSqUnatHylsk5bJDEBPQAAZeFzc3ItXLhQixcv1pQpUxQaGqrt27crPj5ePXr00IABA2y/BE6bNk0DBw5U06ZNtWfPHknnW1wPHjxYkydPVp06dZSenq4uXbpo2LBhmjx5sm09APAFF35pio1t49R9evUc486QAFRg5GCllzBmhiTplltaKiyspkJCAm237U1LV+Ljz2pI4iQmoAcAoIx8rsglSX369NHYsWP1yiuvKDw8XFu2bLGbyFSSAgICVKVKFdtp8JJ09uxZde3aVePGjdOLL76o8PBw7dq1S8OHD9dbb73liacCAKVm/dJ04ZclR6KiIgp8qQKA0iAHK52UlG3q1XOMliWPc/pHCQAAUHJ+kgpvhYNitWzZUps2bVKrVq2Unp7u6XAAVADWX/O3p/yqKQ8OK/PjWb9ULV+eqk4dX3RBhADgeb6YgxX1fuzq934AACojnzyTCwAqgwbNIzUkcVKR6+RkZGrJ1CTtTfONL3gAgKJd+N7PezwAACVDkQsAvMyFnbacnZ8l8fFn3RkSAMDNinrv5z0eAADnUOQCAC+zZGqSpOI7bDVoHqnA0BA6cQFABXDxez/v8QAAlBxFLgDwMtZOW8WhExcAVBwXv/fzHg8AQMn5ezoAAAAAAAAAoKw4kwsAAADwUhc3IWEyegAACkeRCwAAAChHsbFtFB0dqZSUbYWuU1wTEiajBwCgILcXufz8/FSjRg1lZWW5e1MAAAD4P+Rg3sdi+etYjBgZp149xxS6rqMmJExGDwBA0Vxe5Kpevbri4uJ0xx136KabblK9evXk5+ennJwcpaena9myZZo+fbp+++03V28aAACg0iIH834JY2borrvaS5JCQgKLXNdRExImowcAoGguK3LVqFFDzz33nJ588knVqlVLW7Zs0dKlS3X48GFlZ2crPDxcTZo00SOPPKJnnnlGq1ev1nPPPac1a9a4KgQAAIBKhxzMd6SkbNPy5amKjW3j6VAAAKiQXFbk2rZtmzIyMpSQkKDp06fr8OHDha7bsWNHDRo0SMnJyXrsscf00UcfuSoMAACASoUcDAAA4DyXFbleeuklffLJJzp37lyx6yYnJys5OVmjRo3SlVde6aoQAKBSurjz1sUub15PkpjDBaigyMEqnwvf9+m2CADAX1xW5EpKSrL9++TJk7r55puVlpZW5H127dqlXbt2uSoEAKhUiuu8ZRUYelLSWYVfXr98AgNQrsjBKo+i3vfptggAgJu6K4aEhCgw0PFkmg0bNlSfPn307rvvumPTAFBpOOq85ci5ho0kSX7+/m6PCYBnkYNVbBe/79NtEQAAey4rct18882qX7++1q1bJ0kyxjhcr379+powYQIJFgCUkaPOW4482X2WVKtGOUQEwBPIwSqPi9/36bYIAIA9lxW5YmNj9fLLL8sYI2OMJk+erJUrV2rdunVat26dtmzZIkm69NJLlZGR4arNAgAAVGrkYAAAAOe57NqVhIQEXX311br//vvl5+cnY4zi4+P16aefKi0tTadPn9bPP/+sjz/+WL/88ourNgsAAFCpkYOhQfNIPThxvBq2bunpUAAA8CiXzsm1bds2bdu2Tf/85z81ePBgbdiwQQ0aNNC1116ra6+9Vtdcc402bdqkl19+2ZWbBQAAqNTIwXxPbGwbRUdHKiVlW6kf48KJ6FvF3iyJCegBAJWbWyaej46Otv17//792r9/v+bNm+eOTQEAAOD/kIN5P4sly/bvESPj1KvnmFI/lnUi+ibt2jIBPQAAcuHligAAAACKljBmhu3fISGOO2E6yzoR/f7fS382GAAAFQlFLgAAAKCcpKRs0/LlqZ4OAwCACsllRa7U1FTdfffdTq9/2WWX6d1339Xzzz/vqhAAAAAqHXIwWDEBPQCgsnNZkevLL7/Up59+qj/++EPjxo1Tt27dVKdOHdvtNWrUUKtWrfTQQw9p3rx5+uOPP3TttdcyTwQAAEAZkIPh4gnouw4e5OGIAADwDJdNPD9mzBh9+OGHeuqpp/Twww/r+eeflzFGxhjl5eWpWrVqkiQ/Pz/99NNPiouL05w5c1y1eQAAgEqJHAxMQA8AwHku7a74559/avjw4RoxYoRiYmJ04403qn79+goMDNTRo0e1ZcsWLV++XPv373flZgEAACo1crDKzToB/ZDESWoW3c7T4QAA4DEuLXJZnT17VqtWrdKqVavc8fAAAABwgBwMAABUZm4pcll9/vnn2rhxo20cOnTInZsDAACAyMEAAEDl5NYiV3x8vKKjo5WTk6PmzZvrxIkTdgnXxo0blZaW5s4QAAAAKh1ysMqtWXQ7NWzdUnvT0j0dCgAA5cqtRa4777xT48aN09atWxUfH6+qVauqbdu2atu2rQYNGqQ2bdro0ksvdWcIAID/Uz0oUEMSJxW5Tk5GppZMTeKLEeDjyMEqJ2uXRUnqOniQEh9/1oPRAABQ/txa5FqwYIEWLFig+++/X998840WLVqkl19+WZ988ok7NwsAuIA5d06S5F8lwOkJifliBPg2crDKacnUJLWKvVmS6LAIAKiU/MtjI5999platWqlXbt2KSUlRaNGjVJgYGB5bBoAKr3jBw5KkrJOn9H2lF8LHVmnLZL4YgRUJORglcvetHRtT/nV02EAAOAxbj2Ty+qyyy5TixYtlJOTo9WrV+ull17S6tWrtWTJkvLYPABUatbLV+oFntU9EacKXe/yiFOqEnxOX+2qVl6hAXAzcjAAAFCZuLXItWrVKjVv3lzHjx9XWlqa0tLS9M0332jMmDH6/fff3blpAMD/sViyJElhYTUVG9ummLXz1KNtLQ13f1gA3IgcDEw+DwCojNxa5Lr++uu1fft2rV69Whs2bLB18zlx4oQ7NwsAuEDCmBmSpJCQoi9Ran9DKwVV91f1qn7lERYANyIH8w1RURFaljxO0vkfJBLGzFBKyrYyPSaTzwMAKjO3FrkiIiJsnXxuvvlmDRs2TBERETp48KAt2RoxYoQ7QwCASi8lZZt69RxT7HpbDszSVfVrlENEANyNHMy7FXWGrTPv10Vh8nkAQGXm1iLX6dOnNX/+fM2fP9+2LCgoSNdcc40t8QIAAIBrkYN5t4vPsI2KilBYWM1iz7h1hnXyeWe76QIAUJG4tcg1Z84cdenSRfn5+bZlmZmZWrNmjdasWePOTQMAAFRa5GDe7eIzbJclj3NizkQAAFAcf3c++KFDh/Thhx86vC0wMFBffPGFOzcPAABQKZGDAQCAysitRa7/9//+n66++mq98MILdsubNWumn3/+WcHBwe7cPAAAQKVEDuabrBPRW8fceSMVHR1Z6sdr0DxSD04cr4atW7owSgAAvJdbi1y5ubm6++679fDDD6tv376SpF69emnt2rWaMWOGevbs6c7NAwAAVErkYL7l4onoreOuu9prxMi4Ej+etcNiYGiIWsXerK6DB7k0XgAAvJVb5+SqXr26Dh8+rLvuuks//PCDunfvrp49e6pfv3764Ycf3LlpAACASosczLdcPBG9VLbJ6JdMTZIkNWnXVoGhIXRZBABUGm4tcp05c0Zbt27Vxo0blZaWprvvvls9e/bU//73P3duFgAAoFIjB/MtF09EL5VtMvq9aelKfPxZDUmcRJdFAECl4tYiV9OmTW1tqtu2basTJ05oxYoVOnnypDZu3KgNGzboX//6lztDAAAAqHTIwQAAQGXk1iLXnj17tGfPHs2fP9+2LCgoSNdcc40t6QIAAIBrkYNVHNbJ6KXzc3cljJmhlJRtHo4KAADv5LIi15tvvqlbbrlFMTExBW676qqrVKNGDaWmpiozM1Nr1qzRmjVrXLVpAACASoscrGK6eDL6C118aWNxGjSP1JDESZLOT0q/ZGqS9qaluyZQAAC8SKmLXI0aNdIff/xh+//Y2Fj9/PPP9g9epYq+/fZbdenSRZK0d+9eDRgwQKtXry7tZgEAACo1crDK4eLJ6EszEf2FXRYvnpsr8fFnXRQpAADew780dxo2bJh++uknu2WNGjXSihUr7JYNGjRIXbt21aZNmzRt2jQZY/Tdd9/piiuuKH3EAAAAlRQ5WOVhnYy+U8cX1anji9qwYVeJH2PJ1CRtWr5S21N+1faUX5V12iJJdFsEAFRYJT6TKzk5WcHBwerQoYPd8pCQEO3fv99uWb9+/ZSdna2OHTvq+PHjCgsL09q1a/XMM8/o6aefLlvkAAAAlQg5GErK2mXRim6LAICKrsRncl133XVasGCBdu2y/zXp2LFjuuyyy2z/X61aNd14441KTk7W8ePHJUknT57U5MmT1b179zKGDQAAULmQgwEAABStxEWutm3b6tZbb9WiRYvslq9cuVIDBgyw/X/nzp1VvXp1JScn262XlpamK6+8spThAgAAVE7kYAAAAEUr8eWKO3fuVMeOHfX444/bLX/77be1cuVKffrpp1qyZImefvppGWP07bff2q2Xn5+v/Pz8skUNAABQyZCDAQAAFK3U3RUnTpxo9/9r1qzR0KFD9e6776p///7y8/PT119/rd9//91uvdatW+vQoUOl3SwAAEClRg4GAADgWKmLXI588MEHmj9/vmJjY2WxWPTdd98VWCcuLk4bNmxw5WYBAAAqNXIwAAAAFxe5JOngwYP64osvHN526aWXKisrS3PnznX1ZgEAACo1cjAAAFDZubzIVZRDhw6pa9eu5blJAACASo8crOKIjW2j6OhIpaRs83QoAAB4nRJ3VwQAAABQviyWLNu/R4yM82AkAAB4L4pcAAAAgJdLGDPD9u+QkEAPRgIAgPeiyAUAAAB4uZSUbVq+PNXTYQAA4NUocgEAAAAAAMDn+WSRKzg4WG+//bb279+vrKwsrV+/Xv369Svx44wZM0bGGKWm8qsYAABAccjBAACANyvX7oquMnv2bEVHR2v48OHaunWr+vfvrxkzZsjf37/Q1tkXa9u2rf71r3/pzz//dHO0AOBbrgivpmXJ44pcx2LJUsKYGXT3AioZcjDvEBUVobnzRvI+DADARXyuyNWjRw9169ZN8fHxmjHj/AScy5cvV6NGjTR+/HjNnDlT586dK/IxAgIClJSUpKlTp6pt27aqU6dOeYQOAF4tJ89IkoKq+ys2to1T9+nVc4w7QwLgRcjB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WTp9+rROnDihzz//XNddd52MMRo4cKDdutdee63mzp2rY8eOKSsrS7/++qvuueeeUsd43333yRij66+/vsBtI0eOVG5ururXr29b1rlzZ/3www86deqUMjIytHLlSnXq1Mnufk2bNlViYqK2bt2qjIwM7du3T/PmzVPr1q3t1rNeQnnffffpzTff1L59+5STk6NmzZopMDBQ48eP186dO5WVlaVjx44pJSVFcXFxpX6uAABUJo4uVzTGaOLEiXrggQe0ZcsWZWZmKiUlRTExMZKkf/3rX9q5c6csFouWLl2qpk2bFnhcZ3IBR/z8/PTvf//btt0TJ05o48aNeuKJJ2zrOLpcMTk5Wampqbruuuu0YsUKZWRkaMeOHXr++efl5+dnt41atWrpzTff1I4dO5Sdna1Dhw7pu+++U/PmzW3rVK1aVf/+97+1efNmZWdn6/Dhw0pMTFSdOnWK3Z+PPfaYbT9ahzVW674dPHiw0tPTlZOTY8vjmjVrpunTp+vQoUPKzs5Wenq6hg4davf41atX15tvvqn169fr5MmTOnbsmFavXq2ePXvarWeMUc2aNfXAAw/YYkhOTrbbfx07dtQHH3ygo0eP6tSpU/rkk08UFBSkSy+9VDNnztSJEyd04MABjR8/XlWq2J8f4uz+2bVrl+bPn6/bbrtN69atU2ZmpjZv3qxBgwbZHc+vvvpKkrR8+XJbvBfnt84KCQmxPS+LxaIFCxYoMjKywHrO5KLBwcE6ceKE3n///QL3b9Sokc6ePat//etfkkReCq/h8dPJGAxG5R01atQwJ06cMGvXrjWSzIMPPmiMMeb//b//Z7deUFCQ2bp1qzl69KgZMmSI6dq1q5kwYYLZsWOHMcaYgQMH2taNjY012dnZ5scffzT33HOP6datm0lMTCywnqNhvVzx4lPFq1atag4cOGA+++wzu+UBAQFm3759ZubMmbZlAwYMMPn5+Wb27Nnm7rvvNnfccYeZN2+eycvLM506dbKtd8stt5jx48ebPn36mFtuucX06tXLzJ4922RkZJirrrqqQEx79+41X375pbnzzjvN7bffbi655BIzZcoUc+bMGfPUU0+ZDh06mNtvv90899xzZtiwYQWe26hRozgtnMFgMBiVciQlJRmLxVLobbt27bJbZowxu3btMitXrjR333236dWrl9myZYs5evSomTBh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",
            "text/plain": [
              "<Figure size 1440x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "x_standard, y_standard = kaplan_meier_estimator(df.query('trt == 1')['status'].astype(bool), df.query('trt == 1')['age'])\n",
        "x_test, y_test = kaplan_meier_estimator(df.query('trt == 2')['status'].astype(bool), df.query('trt == 2')['age'])\n",
        "\n",
        "f, ax = plt.subplots(1, 2, dpi = 120, figsize = (12, 4))\n",
        "# Standard treatment by age\n",
        "ax[0].step(x_standard, y_standard, where=\"post\", label = 'standard')\n",
        "ax[0].step(x_test, y_test, where=\"post\", label = 'test')\n",
        "ax[0].set_ylim(0, 1)\n",
        "clean_ax(ax[0])\n",
        "ax[0].set_ylabel(r'$\\hat{S}_{KM}(t)$')\n",
        "ax[0].set_xlabel('Age [years]')\n",
        "ax[0].set_title('Kaplan-Meier estimate by Age and Treatment')\n",
        "ax[0].legend(loc = 'best', frameon = False)\n",
        "\n",
        "\n",
        "x_standard, y_standard = kaplan_meier_estimator(df.query('trt == 1')['status'].astype(bool), df.query('trt == 1')['time'])\n",
        "x_test, y_test = kaplan_meier_estimator(df.query('trt == 2')['status'].astype(bool), df.query('trt == 2')['time'])\n",
        "\n",
        "# Standard treatment by age\n",
        "ax[1].step(x_standard, y_standard, where=\"post\", label = 'standard')\n",
        "ax[1].step(x_test, y_test, where=\"post\", label = 'test')\n",
        "ax[1].set_ylim(0, 1)\n",
        "clean_ax(ax[1])\n",
        "ax[1].set_ylabel(r'$\\hat{S}_{KM}(t)$')\n",
        "ax[1].set_xlabel('Time since treatment [days]')\n",
        "ax[1].set_title('Kaplan-Meier estimate by time and Treatment')\n",
        "ax[1].legend(loc = 'best', frameon = False)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DxI_16rnJlRp"
      },
      "source": [
        "The above Kaplan-Meier estimates for the survival curves allow to study the effect of covariates on the survival function. This approach of splitting the dataset into smaller groups according to a variable is useful but not feasible when we want to consider more than a couple of variables, because subgroups will become very small very quickly. For this kind of situations we need models! BAM!\n",
        "\n",
        "## Cox Proportional Hazard Models\n",
        "\n",
        "This family of models introduced by Cox (1972) focuses on the hazard function insted of focusing on the survival function. The simplest member of this family of models is the **proportional hazards** model. For this model, the hazard at time $t$ for an individual with covariates $\\vec{x}_i$ is assumed to be:\n",
        "$$\\lambda(t| \\vec{x}_i) = \\lambda_0(t)\\exp \\left\\{ \\vec{x}_i \\cdot \\vec{\\beta}\\right\\},$$\n",
        "where $\\lambda_0 (t)$ is a baseline hazard function that describes the risk of individuals with $\\vec{x}_i= 0$, who serve as a reference. The multiplicative term $\\exp \\{\\vec{x}_i\\cdot \\vec{\\beta}\\}$ is the relative risk, a proportionate increase or reduction in risk that depends on the set of covariates $\\vec{x}_i$. Note that this increase or reduction of risk does not change with time. In fact, the **proportional hazard assumption** is satisfied by two samples $\\vec{x}_1$ and $\\vec{x}_2$ when:\n",
        "$$\\dfrac{\\lambda(t|\\vec{x}_1)}{\\lambda(t|\\vec{x}_2)} = \\dfrac{\\lambda_0(t)\\exp\\{\\vec{x}_1\\cdot \\vec{\\beta}\\}}{\\lambda_0(t)\\exp\\{\\vec{x}_2\\cdot \\vec{\\beta}\\}} = e^{(\\vec{x}_1-\\vec{x}_2)\\cdot \\vec{\\beta}},$$\n",
        "is constant with time. Taking the logarithm we obtain:\n",
        "$$\\log\\lambda_i(t| \\vec{x}_i) = \\alpha_0(t)+ \\vec{x}_i\\cdot \\vec{\\beta},$$\n",
        "which yields a linear model for the logarithm of the hazard. Returning to the expression for the hazard, we can integrate it to obtain the cumulative hazard functions:\n",
        "$$\\Lambda_i(t| \\vec{x}_i) = \\Lambda_0(t) \\exp\\{\\vec{x}_i\\cdot \\vec{\\beta}\\},$$\n",
        "exponentiating we obtain the survival functions:\n",
        "$$S_i(t| \\vec{x}_i)= S_0(t)^{\\exp \\{\\vec{x}_i \\cdot \\vec{\\beta}\\}}.$$\n",
        "\n",
        "Thus, the effect of the relative risk factor on the survival function is to raise it to a power. The likelihood of an event to be observed occuring for subket $i$ at time $t_i$ can be written as:\n",
        "$$\\mathcal{L}_i(\\beta) = \\dfrac{\\lambda(t_i| \\vec{x}_i)}{\\sum_{j:t_j \\geq t_i}\\lambda (t_i| \\vec{x}_j)},$$\n",
        "that represents the probability of subject $i$ having an event at time $t_i$ among those at risk at time $t_i$. Note that the baseline hazard gets canceled out in the above expression, so we can write for the likelihood\n",
        "$$\\mathcal{L}(\\beta) = \\prod_{i}\\dfrac{e^{\\vec{x}_i\\cdot \\vec{\\beta}}}{\\sum_{j: t_j \\geq t_i}e^{\\vec{x}_j\\cdot \\vec{\\beta}}}$$\n",
        "The above expression has to be corrected for *tied* events, this is, when the number of deaths $d_i$ at time $t_i$ is greater than 1. This yields:\n",
        "$$\\mathcal{L}(\\beta) = \\prod_{i}\\dfrac{e^{\\vec{x}_i\\cdot \\vec{\\beta}}}{\\left(\\sum_{j: t_j \\geq t_i}e^{\\vec{x}_j\\cdot \\vec{\\beta}}\\right)^{d_i}}.$$\n",
        "> **Example:** Let us go back to the lung cancer dataset and try to estimate the risk scores and survival curve."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XUbh8MoaJlRp"
      },
      "outputs": [],
      "source": [
        "from sksurv.linear_model import CoxPHSurvivalAnalysis\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KiavSg7yJlRp"
      },
      "outputs": [],
      "source": [
        "from sksurv.datasets import load_veterans_lung_cancer, get_x_y\n",
        "\n",
        "# data_x, data_y = load_veterans_lung_cancer()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zRSVqgEQJlRp"
      },
      "outputs": [],
      "source": [
        "df['status_bool'] = df['status'].astype(np.bool_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mukl0VnDJlRq",
        "outputId": "3ebe68fd-fbbd-4922-800f-4563ebe43f64"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "CoxPHSurvivalAnalysis()"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "features = ['karno', 'diagtime', 'age', 'prior', 'trt', 'celltype']\n",
        "targets = ['status_bool', 'time']\n",
        "\n",
        "data_x, data_y = get_x_y(df[features+ targets], attr_labels= targets, pos_label=True)\n",
        "\n",
        "from sksurv.preprocessing import OneHotEncoder\n",
        "\n",
        "data_x_numeric = OneHotEncoder().fit_transform(data_x)\n",
        "data_x_numeric.head()\n",
        "\n",
        "\n",
        "estimator = CoxPHSurvivalAnalysis()\n",
        "estimator.fit(data_x_numeric, data_y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TvRFsbSLJlRq"
      },
      "outputs": [],
      "source": [
        "x_test = data_x_numeric.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dgyp4Ga4JlRq",
        "outputId": "2e3f9e3a-1a6d-41e8-edb3-4aad1704131a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "f, ax = plt.subplots(dpi = 120)\n",
        "pred_surv = estimator.predict_survival_function(x_test)\n",
        "time_points = np.arange(1, 1000)\n",
        "for i, surv_func in enumerate(pred_surv):\n",
        "    ax.step(time_points, surv_func(time_points), where=\"post\",\n",
        "             label=\"Subject %d\" % (i + 1))\n",
        "ax.set_ylabel(\"est. probability of survival $\\hat{S}(t)$\")\n",
        "ax.set_xlabel(\"time $t$\")\n",
        "ax.legend(loc=\"best\", frameon = False)\n",
        "clean_ax(ax)\n",
        "ax.set_title('Cox Proportional Hazard model')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RFoz2_8pJlRq"
      },
      "source": [
        "## Exponential and Weibull models\n",
        "Different kinds of proportional hazard models are obtained depending on the different choices for the baseline survival function. For example, we could (for some reason) set the baseline hazard function $\\lambda_0(t) = \\lambda_0$ to be a constant value. Then the hazard of subject $i$ at time $t$ reads:\n",
        "$$\\lambda_i(t| \\vec{x}_i) = \\lambda_0\\, e^{\\vec{x}_i\\cdot \\vec{\\beta}}.$$\n",
        "\n",
        "Another common model is obtained by assuming the death density function follows a *Weibull* distribution from which the survival function is:\n",
        "$$S(t) = e^{-(\\lambda t)^p},$$\n",
        "and hazard function\n",
        "$$\\lambda(t) = p \\lambda (\\lambda t)^{p-1},$$\n",
        "where $\\lambda >0$ and $p > 0 $ are parameters. If $p=1$, this model reduces to the exponential model and has constant risk over time. If $p>1$, then the risk increases over time. If $p<1$, then the risk decreases with time. this can be seen by taking the log of the above expression:\n",
        "$$\\log \\lambda(t) = \\log(p) + \\log(\\lambda) + (p-1)\\log(\\lambda t).$$\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F-9tpi1oJlRq"
      },
      "source": [
        "\n",
        "### Time-Varying Covariates\n",
        "The nature of the model allows for considering time dependent covariates.\n",
        "Let $\\vec{x}_i(t)$ denote the value of a covariate vector for subject $i$ at time (or duration) $t$. The proportional hazard model now reads:\n",
        "$$\\lambda(t|\\vec{x}_i) = \\lambda_0(t)\\;e^{\\vec{\\beta} \\cdot \\vec{x}_i(t)}.$$\n",
        "\n",
        "### Time-dependent \"Effects\"\n",
        "The model can also be generalized so the coefficients $\\beta(t)$ are now a function of time. Example: it is possible that cetain social characteristics might have a large impact on the hazard for children shortly after birth, but may have a relatively small impact later in life. So, we would like something like:\n",
        "$$\\lambda_i(t|\\vec{x}_i) = \\lambda_0(t)\\; e^{\\vec{\\beta}(t) \\cdot \\vec{x}_i}.$$\n",
        "\n",
        "### The General Hazard Rate Model\n",
        "Naturally, we can let everything depend on time to obtain the most general version of a hazard rate model:\n",
        "$$\\lambda_i(t|\\vec{x}_i) = \\lambda_0(t)\\;e^{\\vec{\\beta} (t) \\cdot \\vec{x}_i(t)}.$$\n",
        "Or... more generally:\n",
        "$$\\lambda_i(t|\\vec{x}_i) = \\lambda_0(t)\\; f_{ML}(\\vec{x}_i,t).$$\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VO_t121NJlRq"
      },
      "source": [
        "# Discrete Time Models\n",
        "There are cases where the time variable is actually a \"discrete\" value, which basically means that is not continuous. One example is using the age as a predictor for death risk. Having a discrete description is useful. In practice, it is the discrete description that is used to approximate the functions using our computers.\n",
        "\n",
        "Let the survival time $T$ be a discrete random variable that takes the values $t_1 < t_2 < \\dots < t_n$ with density function:\n",
        "$f(t_j) = f_j = \\mathbb{P}(T = t_i).$\n",
        "The survivor function at time $t_j$ is then:\n",
        "$$S(t_j) = S_j = \\mathbb{P}(T \\geq t_j) = \\sum_{k = j}^{\\infty}f_k.$$\n",
        "Next, we need to define the hazard at time $t_j$ as the conditional probability of dying at that time given that one has survived to that point, so that:\n",
        "$$\\lambda(t_j) = \\lambda_j = \\mathbb{P}(T = t_j | T \\geq t_j)=  \\dfrac{f_j}{S_j}.$$\n",
        "Another result of interest in discrete time is that the survival function at time $t_j$ can be written in terms of the hazard at all prior times $t_1, \\dots, t_{j-1}$ as:\n",
        "$$S_j = (1-\\lambda_1)(1- \\lambda_2) \\dots (1-\\lambda_{j-1}),$$\n",
        "which makes sense, since one needs to survive $t_1$, then one must survive $t_2$ given that has survived $t_1$, and so on, finally surviving $t_{j-1}$ up to that point."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fjtiyB7tJlRq"
      },
      "source": [
        "# Measuring the Performance of Survival Models\n",
        "Usual metrics such as RMSE or correlation might not be suitable for censored variables. The most frequently used evalution metric of survival models is the concordance index (c-index, c-statistic). It is a rank correlation between predicted risk scores $\\hat{f}$ and observed time points $t$ that is closely related to Kendall's $\\tau$. It is defined as the ratio of correctly ordered (concordant) pairs to comparable pairs. This is, two samples $i$ and $j$ are **comparable** if the sample with lower survival time $t$ experienced an event, i.e., if $t_j > t_i$ and $d_i=1$. A comparable pair is **concordant** if the estimated risk $\\hat{f}$ by a survival model is higher for subjects with lower survival time, i.e.,\n",
        "$$\\hat{f}_i > \\hat{f}_j \\; \\land t_j > t_i, $$\n",
        "otherwise the pair is said to be **discordant**. Essentially, we are talking about the following quantity:\n",
        "$$\\boxed{\\mathbb{P}(\\hat{f}_i > \\hat{f}_j| t_j > t_i) .}$$\n",
        "[Harrell](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3079915/) proposed an estimator of this quantity and that is implemented in `scikit-survival`. Known as Harrell's concordance index, c-index or c-statistic. The interpretation is identicall to our usual ROC curve."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D3TTWCBbJlRr"
      },
      "outputs": [],
      "source": [
        "from sksurv.metrics import concordance_index_censored, concordance_index_ipcw"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t-Dlpkd-JlRr",
        "outputId": "89060d92-62cd-41d1-80f0-cecdf56c0ee5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7051340299863699"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "prediction = estimator.predict(data_x_numeric)\n",
        "result = concordance_index_censored(data_y[\"status_bool\"], data_y[\"time\"], prediction)\n",
        "result[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gB7OI2QbJlRr"
      },
      "source": [
        "While Harrell’s concordance index is easy to interpret and compute, it has some shortcomings:\n",
        "1. it has been shown that it is too optimistic with increasing amount of censoring\n",
        "2. it is not a useful measure of performance if a specific time range is of primary interest (e.g. predicting death within 2 years).\n",
        "\n",
        "The first point is addressed by a weighing procedure known as IPCW (Inverse Probability of Censoring Weights).\n",
        "\n",
        "The second issue is adressed by extending the well known ROC curve to possibly censored survival times. Given a time point $t$, we can estimate how well a predictive model can distinguishing subjects who will experience an event by time $t$ (sensitivity) from those who will not (specificity). The resulting AUC for this time-dependent cumulative/dynamic ROC curve is:\n",
        " $$\\text{AUC}^{C,D}(t) = \\mathbb{P}(\\hat{f}_i > \\hat{f}_j | T_i \\leq t, T_j > t).$$\n",
        " An estimator for this quantity is implemented in `scikit-survival`, defined as:\n",
        " $$\\widehat{AUC}(t) = \\dfrac{\\sum_{i=1}^{N}\\sum_{j=1}^{N}\\mathbb{I}_{t_j>t}\\,\\mathbb{I}_{t_i\\leq t}\\,\\omega_i\\, \\mathbb{I}_{\\hat{f}_i > \\hat{f}_j}}{\\left(\\sum_{i = 1}^{N}\\mathbb{I}_{t_i> t}\\right)\\left(\\sum_{i = 1}^{N}\\mathbb{I}_{t_j\\leq t}\\omega_i\\right)},$$\n",
        "where $\\omega_i$ are inverse probability of censoring weights (IPCW).\n",
        "To estimate IPCW, access to survival times from the training data is required to estimate the censoring distribution. Note that this requires that survival times survival_test lie within the range of survival times survival_train. This can be achieved by specifying times accordingly, e.g. by setting times[-1] slightly below the maximum expected follow-up time. IPCW are computed using the Kaplan-Meier estimator, which is restricted to situations where the random censoring assumption holds and censoring is independent of the features.\n",
        "Finally, the function also provides a single summary measure that refers to the mean of the $\\text{AUC}(t)$ over the time range $(\\tau_1,\\tau_2)$:\n",
        "$$\\widehat{\\text{AUC}}(\\tau_1, \\tau_2) = \\dfrac{1}{\\hat{S}(\\tau_1)- \\hat{S}(\\tau_2)}\\int_{\\tau_1}^{\\tau_2}\\widehat{\\text{AUC}}(t)d\\hat{S}(t),$$\n",
        "where $\\hat{S}(t)$ is the Kaplan-Meier estimator of the survival function.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XRwcOH6uJlRw"
      },
      "outputs": [],
      "source": [
        "from sksurv.metrics import (\n",
        "    concordance_index_censored,\n",
        "    concordance_index_ipcw,\n",
        "    cumulative_dynamic_auc,\n",
        "    integrated_brier_score,\n",
        ")\n",
        "from sksurv.datasets import load_flchain\n",
        "\n",
        "from sklearn.impute import SimpleImputer"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Nkyh6fkJlRw"
      },
      "source": [
        "Let us load another built-in dataset from `scikit-survival`. The dataset has 7874 samples and 9 features:\n",
        "\n",
        ">* age: age in years\n",
        ">* sex: F=female, M=male\n",
        ">* sample.yr: the calendar year in which a blood sample was obtained\n",
        ">* kappa: serum free light chain, kappa portion\n",
        ">* lambda: serum free light chain, lambda portion\n",
        ">* flc.grp: the serum free light chain group for the subject, as used in the original analysis\n",
        ">* creatinine: serum creatinine\n",
        ">* mgus: whether the subject had been diagnosed with monoclonal gammapothy (MGUS)\n",
        ">* chapter: for those who died, a grouping of their primary cause of death by chapter headings of the International Code of Diseases ICD-9\n",
        ">* The endpoint is death, which occurred for 2169 subjects (27.5%)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "agK2SVbKJlRw"
      },
      "outputs": [],
      "source": [
        "x, y = load_flchain()\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mq5abRdnJlRx"
      },
      "source": [
        "Let us treat some missing values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uA-GoTLBJlRx"
      },
      "outputs": [],
      "source": [
        "num_columns = ['age', 'creatinine', 'kappa', 'lambda']\n",
        "\n",
        "imputer = SimpleImputer().fit(x_train.loc[:, num_columns])\n",
        "x_test_imputed = imputer.transform(x_test.loc[:, num_columns])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ka9f26xdJlRx"
      },
      "source": [
        "We need to be a little bit careful when selecting the test data and time points we want to evaluate the ROC at, due to the estimator’s dependence on inverse probability of censoring weighting. First, we are going to check whether the observed time of the test data lies within the observed time range of the training data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oPSJo4wzJlRx"
      },
      "outputs": [],
      "source": [
        "y_events = y_train[y_train['death']]\n",
        "train_min, train_max = y_events[\"futime\"].min(), y_events[\"futime\"].max()\n",
        "\n",
        "y_events = y_test[y_test['death']]\n",
        "test_min, test_max = y_events[\"futime\"].min(), y_events[\"futime\"].max()\n",
        "\n",
        "assert train_min <= test_min < test_max < train_max, \\\n",
        "    \"time range or test data is not within time range of training data.\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1FsbwpHTJlRx"
      },
      "source": [
        "When choosing the time points to evaluate the ROC at, it is important to remember to choose the last time point such that the probability of being censored after the last time point is non-zero. Here we use a more conservative approach by setting the upper bound to the 80% percentile of observed time points, because the censoring rate is quite large at 72.5%."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uTl_0UMTJlRx",
        "outputId": "bb742667-48d5-41f4-88fd-99ab9c957c78"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[ 470.3        1259.         1998.         2464.82428571 2979.\n",
            " 3401.         3787.99857143 4051.         4249.         4410.17285714\n",
            " 4543.         4631.         4695.         4781.         4844.        ]\n"
          ]
        }
      ],
      "source": [
        "times = np.percentile(y[\"futime\"], np.linspace(5, 81, 15))\n",
        "print(times)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0-u4CoMiJlRx",
        "outputId": "0f291f3e-a809-4c3d-8bd5-98ace9825952"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Time dependent AUC')"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "def plot_cumulative_dynamic_auc(risk_score, label, color=None, ax = None):\n",
        "    auc, mean_auc = cumulative_dynamic_auc(y_train, y_test, risk_score, times)\n",
        "    if ax == None:\n",
        "        plt.plot(times, auc, marker=\"o\", color=color, label=label, alpha = 0.7)\n",
        "        plt.xlabel(\"days from enrollment\")\n",
        "        plt.ylabel(\"time-dependent AUC\")\n",
        "        plt.axhline(mean_auc, color=color, linestyle=\"--\", alpha = 0.7)\n",
        "        plt.legend(loc = 'best', frameon = False)\n",
        "    else:\n",
        "        ax.plot(times, auc, marker=\"o\", color=color, label=label, alpha = 0.7)\n",
        "        ax.set_xlabel(\"days from enrollment\")\n",
        "        ax.set_ylabel(\"time-dependent AUC\")\n",
        "        ax.axhline(mean_auc, color=color, linestyle=\"--\", alpha = 0.7)\n",
        "        ax.legend(loc = 'best', frameon = False)\n",
        "\n",
        "\n",
        "\n",
        "f, ax = plt.subplots(dpi = 120)\n",
        "\n",
        "for i, col in enumerate(num_columns):\n",
        "    plot_cumulative_dynamic_auc(x_test_imputed[:, i], col, color=\"C{}\".format(i), ax = ax)\n",
        "    ret = concordance_index_ipcw(y_train, y_test, x_test_imputed[:, i], tau=times[-1])\n",
        "    clean_ax(ax)\n",
        "ax.set_title('Time dependent AUC')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dFpGL22vJlRy"
      },
      "source": [
        "The plot shows the estimated area under the time-dependent ROC at each time point and the average across all time points as dashed line.\n",
        "\n",
        "We can see that age is overall the most discriminative feature, followed by $\\kappa$ and $\\lambda$ FLC. That fact that age is the strongest predictor of overall survival in the general population is hardly surprising (we have to die at some point after all). More differences become evident when considering time: the discriminative power of FLC decreases at later time points, while that of age increases. The observation for age again follows common sense. In contrast, FLC seems to be a good predictor of death in the near future, but not so much if it occurs decades later."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eCyJYYefJlRy"
      },
      "source": [
        "## Evaluating model's predictions\n",
        "### Cox Proportional Hazards model\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GhXr2s2nJlRy"
      },
      "outputs": [],
      "source": [
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "va_x, va_y = load_veterans_lung_cancer()\n",
        "\n",
        "va_x_train, va_x_test, va_y_train, va_y_test = train_test_split(\n",
        "                                                    va_x, va_y, test_size=0.2, stratify=va_y[\"Status\"], random_state=0\n",
        "                                                )"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cae1ZkLhJlRy"
      },
      "source": [
        "Fit the Cox prorportional hazard model to the train data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8N1wIl3MJlRy",
        "outputId": "a3ae5263-38ff-498e-8b79-c8401caa0f37"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pipeline(steps=[('onehotencoder', OneHotEncoder()),\n",
              "                ('coxphsurvivalanalysis', CoxPHSurvivalAnalysis())])"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cph = make_pipeline(OneHotEncoder(), CoxPHSurvivalAnalysis())\n",
        "cph.fit(va_x_train, va_y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QeTjOM12JlRy"
      },
      "source": [
        "Using the test data, we want to assess how well the model can distinguish survivors from deceased in weekly intervals, up to 6 months after enrollment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yr77uW0XJlRy",
        "outputId": "019915b4-2658-4419-e412-e3dee0ab6726"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "va_times = np.arange(8, 184, 7)\n",
        "cph_risk_scores = cph.predict(va_x_test)\n",
        "cph_auc, cph_mean_auc = cumulative_dynamic_auc(va_y_train, va_y_test, cph_risk_scores, va_times)\n",
        "\n",
        "f, ax = plt.subplots(dpi = 120)\n",
        "ax.plot(va_times, cph_auc, marker=\"o\")\n",
        "ax.axhline(cph_mean_auc, linestyle=\"--\")\n",
        "ax.set_xlabel(\"days from enrollment\")\n",
        "ax.set_ylabel(\"time-dependent AUC\")\n",
        "ax.grid(False)\n",
        "ax.set_title('Cox Model: Time dependence of performance')\n",
        "clean_ax(ax)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Lu4nEAHJlRz"
      },
      "source": [
        "The plot shows that the model is doing moderately well on average with an AUC of $\\approx 0.72$ (dashed line). However, there is a clear difference in performance between the first and second half of the time range. The performance on the test data increases up to 56 days from enrollment, remains high until 98 days and quickly drops thereafter. Thus, we can conclude that the model is most effective in predicting death in the **medium-term**."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vZneKctLJlRz"
      },
      "source": [
        "### Random Survival Forests\n",
        "The downside of Cox proportional hazards model is that it can only predict a risk score that is independent of time (due to the built-in proportional hazards assumption). Therefore, a single predicted risk score needs to work well for every time point. In contrast, a Random Survival Forest does not have this restriction. So let’s fit such a model to the training data.  Details of the inner workings of Random Survival Forests can be found [here](https://arxiv.org/pdf/0811.1645.pdf)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OeqQ03zdJlRz",
        "outputId": "bd8f5caa-3674-4170-a8c8-b1fb4fd0f577"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pipeline(steps=[('onehotencoder', OneHotEncoder()),\n",
              "                ('randomsurvivalforest',\n",
              "                 RandomSurvivalForest(min_samples_leaf=7, random_state=0))])"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sksurv.ensemble import RandomSurvivalForest\n",
        "\n",
        "rsf = make_pipeline(OneHotEncoder(),\n",
        "                    RandomSurvivalForest(n_estimators=100, min_samples_leaf=7, random_state=0)\n",
        "                    )\n",
        "rsf.fit(va_x_train, va_y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TcvLz_X5JlRz"
      },
      "source": [
        "For prediction, we do not call predict, which returns a time-independent risk score, but call predict_cumulative_hazard_function, which returns a risk function over time for each patient. We obtain the time-dependent risk scores by evaluating each cumulative hazard function at the time points we are interested in."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aWmkbdNHJlRz"
      },
      "outputs": [],
      "source": [
        "# Predict\n",
        "rsf_chf_funcs = rsf.predict_cumulative_hazard_function(va_x_test, return_array=False)\n",
        "rsf_risk_scores = np.row_stack([chf(va_times) for chf in rsf_chf_funcs])\n",
        "\n",
        "# Dynamic AUC\n",
        "rsf_auc, rsf_mean_auc = cumulative_dynamic_auc(va_y_train, va_y_test, rsf_risk_scores, va_times)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eLdquEwjJlRz",
        "outputId": "693cda09-135c-40d9-f0fb-09347841b161"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "f, ax = plt.subplots(dpi = 120)\n",
        "\n",
        "ax.plot(va_times, cph_auc, \"o-\", label=\"CoxPH (mean AUC = {:.3f})\".format(cph_mean_auc))\n",
        "ax.plot(va_times, rsf_auc, \"o-\", label=\"RSF (mean AUC = {:.3f})\".format(rsf_mean_auc))\n",
        "ax.set_xlabel(\"days from enrollment\")\n",
        "ax.set_ylabel(\"time-dependent AUC\")\n",
        "ax.legend(loc=\"lower center\", frameon = False)\n",
        "clean_ax(ax)\n",
        "ax.set_title('Cox model vs Random Survival Forests')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qe2GZWhQJlRz"
      },
      "source": [
        "Indeed, the Random Survival Forest performs slightly better on average, mostly due to the better performance in the intervals 25–50 days, and 112–147 days. Above 147 days, it actually is doing worse. This shows that the mean AUC is convenient to assess overall performance, but it can hide interesting characteristics that only become visible when looking at the AUC at individual time points."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hhPwEapRJlRz"
      },
      "source": [
        "## Conclusions and further references\n",
        "\n",
        "IMHO Survival Analysis is about asking the right questions:\n",
        "* Does it make sense to tackle this or that problem as a usual classification problem?\n",
        "* What are we trying to model?\n",
        "* Is time an important variable for prediction?\n",
        "\n",
        "There is a considerable amount of (open source) resources out there that are written in python such as [pySurvival](https://square.github.io/pysurvival/index.html) and [scikit-survival](https://scikit-survival.readthedocs.io/en/stable/index.html). The people at Loft made a clever use of XGBoost and some other techniques to tackle the survival analysis problem know as [XGBoost-survival-embeddings](https://github.com/loft-br/xgboost-survival-embeddings).\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3.7.13 ('ibc': conda)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.13"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "4f56bf361103052bf0468e474b81cc5ba6b04e1d19c602b7186c5f82b4298aaa"
      }
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}